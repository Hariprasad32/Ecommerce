<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        :root {
            --primary: #4361ee;
            --primary-light: #eef2ff;
            --secondary: #6c757d;
            --success: #10b981;
            --danger: #ef4444;
            --warning: #f59e0b;
            --info: #3b82f6;
            --dark: #1f2937;
            --light: #f9fafb;
            --body-bg: #f8fafc;
            --body-color: #334155;
            --border-color: #e2e8f0;
            --card-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: "Inter", sans-serif;
            background-color: var(--body-bg);
            color: var(--body-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
        }

        header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 15px;
            border-bottom: 1px solid var(--border-color);
        }

        h1, h2, h3 {
            color: var(--dark);
            margin-bottom: 15px;
        }

        .order-status-container {
            display: flex;
            gap: 20px;
            margin-bottom: 25px;
        }

        .order-status, .payment-status {
            flex: 1;
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
        }

        .status-badge {
            display: inline-block;
            padding: 6px 12px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 15px;
        }

        .status-pending { background-color: #fef3c7; color: #92400e; }
        .status-confirmed { background-color: #dbeafe; color: #1e40af; }
        .status-shipped { background-color: #fef3c7; color: #92400e; }
        .status-delivered { background-color: #d1fae5; color: #065f46; }
        .status-cancelled { background-color: #fee2e2; color: #b91c1c; }
        .status-returned { background-color: #e2e3e5; color: #383d41; }
        .status-paid { background-color: #d1fae5; color: #065f46; }
        .status-pending-payment { background-color: #fef3c7; color: #92400e; }

        .order-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
            margin-bottom: 25px;
        }

        .shipping-info, .payment-info {
            background-color: white;
            padding: 15px;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
        }

        .order-date {
            grid-column: 1 / -1;
            font-size: 14px;
            color: var(--secondary);
        }

        .order-items {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
            margin-bottom: 25px;
        }

        .items-list {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        .item-card {
            display: grid;
            grid-template-columns: 80px 1fr auto;
            gap: 15px;
            padding: 10px;
            border-bottom: 1px solid var(--border-color);
        }

        .item-image img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 4px;
        }

        .item-details {
            display: flex;
            flex-direction: column;
        }

        .item-name {
            font-weight: bold;
            margin-bottom: 5px;
        }

        .item-size, .item-quantity {
            font-size: 14px;
            color: var(--secondary);
            margin-bottom: 5px;
        }

        .item-price-container {
            display: flex;
            flex-direction: column;
            align-items: flex-end;
            justify-content: center;
        }

        .item-price {
            font-weight: bold;
        }

        .order-summary {
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: var(--card-shadow);
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            padding: 10px 0;
            border-top: 1px solid var(--border-color);
            font-weight: bold;
        }

        .status-actions {
            margin-top: 15px;
        }

        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: background-color 0.3s;
        }

        .btn-primary {
            background-color: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background-color: #3651d4;
        }

        .btn-danger {
            background-color: var(--danger);
            color: white;
        }

        .btn-danger:hover {
            background-color: #c82333;
        }

        .btn-secondary {
            background-color: var(--secondary);
            color: white;
        }

        .btn-secondary:hover {
            background-color: #5a6268;
        }

        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal-content {
            background-color: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 80%;
            max-width: 500px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
        }

        .close:hover {
            color: black;
        }

        .form-group {
            margin-bottom: 15px;
        }

        .form-group label {
            display: block;
            margin-bottom: 5px;
        }

        .form-group select, .form-group textarea {
            width: 100%;
            padding: 8px;
            border: 1px solid var(--border-color);
            border-radius: 4px;
        }

        /* Invoice Modal Styles */
        .invoice-btn {
            background-color: var(--success);
            color: white;
            margin-left: 10px;
        }

        .invoice-btn:hover {
            background-color: #0d9488;
        }

        #invoiceModal {
            display: none;
            position: fixed;
            z-index: 1100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            overflow: auto;
        }

        .invoice-modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 800px;
            position: relative;
        }

        .invoice-header {
            text-align: center;
            margin-bottom: 20px;
            border-bottom: 2px solid var(--border-color);
            padding-bottom: 10px;
        }

        .invoice-details {
            display: flex;
            justify-content: space-between;
            margin-bottom: 20px;
        }

        .invoice-items {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
        }

        .invoice-items th, .invoice-items td {
            border: 1px solid var(--border-color);
            padding: 10px;
            text-align: left;
        }

        .invoice-summary {
            text-align: right;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>Order Details</h1>
            <div>
                <span class="order-id">Order ID: <span><%= orders.orderid %></span></span>
                <button class="btn btn-primary invoice-btn" onclick="downloadInvoice()">
                    <i class="fas fa-file-invoice"></i> Download Invoice
                </button>
            </div>
        </header>

        <div class="order-status-container">
            <div class="order-status">
                <h3>Order Status</h3>
                <div class="status-badge status-<%= orders.status.toLowerCase().replace(/\s+/g, '-') %>">
                    <%= orders.status %>
                </div>
            </div>
            <div class="payment-status">
                <h3>Payment Status</h3>
                <% if ((orders.paymentMethod === 'cod' && orders.status !== 'Delivered') || 
                       (orders.paymentMethod === 'razorpay' && orders.paymentStatus !== 'Paid')) { %>
                    <div class="status-badge status-pending-payment">
                        Pending
                    </div>
                    <% if (orders.paymentMethod === 'razorpay' && orders.paymentStatus !== 'Paid') { %>
                        <button class="btn btn-primary" onclick="retryPayment('<%= orders.orderid %>')">
                            <i class="fas fa-redo"></i> Retry Payment
                        </button>
                    <% } %>
                <% } else { %>
                    <div class="status-badge status-paid">
                        Paid
                    </div>
                <% } %>
            </div>
        </div>

        <div class="order-details">
            <div class="order-date">
                <p>Ordered on: <span><%= new Date(orders.orderDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) %></span></p>
            </div>
            <div class="shipping-info">
                <h3>Shipping Address</h3>
                <div>
                    <% if (address) { %>
                        <p><%= address.name %></p>
                        <% if (address.phone) { %><p><%= address.phone %></p><% } %>
                        <% if (address.landMark) { %><p><%= address.landMark %></p><% } %>
                        <p><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                    <% } else { %>
                        <p class="text-danger">Address not available</p>
                    <% } %>
                </div>
            </div>
            <div class="payment-info">
                <h3>Payment Method</h3>
                <p><%= orders.paymentMethod === 'cod' ? 'Cash on Delivery' : orders.paymentMethod %></p>
            </div>
        </div>
        <div class="order-items">
            <h3>Order Items</h3>
            <div class="items-list">
                <% if (orders.orderitems && orders.orderitems.length > 0) { %>
                    <% orders.orderitems.forEach(item => { %>
                        <div class="item-card">
                            <div class="item-image">
                                <img src="/<%= item.productId.productImage %>" alt="<%= item.productId.productName %>">
                            </div>
                            <div class="item-details">
                                <div class="item-name"><%= item.productId.productName %></div>
                                <div class="item-size">Size: <%= item.size %></div>
                                <div class="item-quantity">Quantity: <%= item.quantity %></div>
                                <div class="status-badge status-<%= item.status.toLowerCase().replace(/\s+/g, '-') %>">
                                    <%= item.status %>
                                </div>
                            </div>
                            <div class="item-price-container">
                                <div class="item-price">₹<%= (item.price * item.quantity).toLocaleString() %></div>
                            </div>
                                <div class="status-actions" style="margin-top: 10px;">
                                <% if ((item.status === 'Pending' || orders.status === 'Partially Cancelled') && 
                                    (item.status === 'Pending' || item.status === 'Processing')) { %>
                                    <button class="btn btn-danger" onclick="cancelOrder('<%= item.orderId %>', '<%= item.productId._id %>','<%= orders.orderid %>')">Cancel Item</button>
                                <% } else if (item.status === 'Delivered' && item.status !== 'Returned' && item.status !== 'Return Request') { %>
                                    <button class="btn btn-secondary" onclick="openReturnModal('<%= item.orderId %>', '<%= item.productId._id %>')">Return Item</button>
                                <% } %>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <p>No items found in this order.</p>
                <% } %>
            </div>
        </div>

        <div class="order-summary">
            <h3>Order Summary</h3>
            <div class="summary-row">
                <span>Total Amount:</span>
                <span>₹<%= orders.finalAmount.toLocaleString() %></span>
            </div>
        </div>

        <!-- Return Modal -->
        <div id="returnModal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="document.getElementById('returnModal').style.display='none'">×</span>
                <h2>Return Request</h2>
                <form id="returnForm">
                    <div class="form-group">
                        <label for="returnReason">Reason for Return</label>
                        <select id="returnReason" required>
                            <option value="">Select a reason</option>
                            <option value="Received Wrong Product">Received Wrong Product</option>
                            <option value="Product Damaged">Product Damaged</option>
                            <option value="Not as Described">Not as Described</option>
                            <option value="Changed My Mind">Changed My Mind</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="returnComments">Additional Comments</label>
                        <textarea id="returnComments" rows="4"></textarea>
                    </div>
                    <button type="submit" class="btn btn-primary">Submit Request</button>
                </form>
            </div>
        </div>

        <!-- Invoice Modal -->
        <div id="invoiceModal" class="modal">
            <div class="invoice-modal-content" id="invoicePrintArea">
                <div class="invoice-header">
                    <h2>Invoice</h2>
                    <p>Order ID: <%= orders.orderid %></p>
                    <p>Date: <%= new Date(orders.orderDate).toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                </div>
                <div class="invoice-details">
                    <div>
                        <strong>Billing Address:</strong>
                        <% if (address) { %>
                            <p><%= address.name %></p>
                            <% if (address.phone) { %><p><%= address.phone %></p><% } %>
                            <p><%= address.city %>, <%= address.state %> <%= address.pincode %></p>
                        <% } %>
                    </div>
                    <div>
                        <strong>Payment Method:</strong>
                        <p><%= orders.paymentMethod === 'cod' ? 'Cash on Delivery' : orders.paymentMethod %></p>
                    </div>
                </div>
                <table class="invoice-items">
                    <thead>
                        <tr>
                            <th>Product</th>
                            <th>Size</th>
                            <th>Quantity</th>
                            <th>Price</th>
                            <th>Total</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% if (orders.orderitems && orders.orderitems.length > 0) { %>
                            <% orders.orderitems.forEach(item => { %>
                                <tr>
                                    <td><%= item.productId.productName %></td>
                                    <td><%= item.size %></td>
                                    <td><%= item.quantity %></td>
                                    <td>₹<%= item.price.toLocaleString() %></td>
                                    <td>₹<%= (item.price * item.quantity).toLocaleString() %></td>
                                </tr>
                            <% }) %>
                        <% } %>
                    </tbody>
                </table>
                <div class="invoice-summary">
                    <p><strong>Total Amount: ₹<%= orders.finalAmount.toLocaleString() %></strong></p>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        
function cancelOrder(orderId, productId, orderMainId) {
    console.log('Attempting to cancel:', {
        orderId: orderId,
        productId: productId,
        orderMainId: orderMainId
    });

    Swal.fire({
        title: 'Cancel Your Order?',
        text: 'Are you sure you want to cancel this order?',
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#ef4444',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, cancel it!',
        cancelButtonText: 'No, keep it'
    }).then((result) => {
        if (result.isConfirmed) {
            $.ajax({
                url: `/cancelOrder`, 
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify({ 
                    orderId: orderId, 
                    productId: productId,
                    orderMainId: orderMainId 
                }),
                success: (response) => {
                    if (response.success) {
                        Swal.fire({
                            title: 'Cancelled!',
                            text: response.message,
                            icon: 'success'
                        }).then(() => window.location.reload());
                    } else {
                        Swal.fire({
                            title: 'Cannot Cancel',
                            text: response.message,
                            icon: 'warning'
                        });
                    }
                },
                error: (xhr) => {
                    const errorMsg = xhr.responseJSON?.message || 'Connection error';
                    Swal.fire({
                        title: 'Error!',
                        text: errorMsg,
                        icon: 'error'
                    });
                    console.error('Cancel error:', xhr.responseJSON);
                }
            });
        }
    });
}

async function retryPayment(orderId) {
    const result = await Swal.fire({
        title: 'Retry Payment?',
        text: 'Would you like to retry the payment for this order?',
        icon: 'question',
        showCancelButton: true,
        confirmButtonColor: '#4361ee',
        cancelButtonColor: '#6c757d',
        confirmButtonText: 'Yes, retry payment',
        cancelButtonText: 'Cancel'
    });

    if (result.isConfirmed) {
        try {
            const response = await fetch('/retry-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ orderId: orderId })
            });

            const data = await response.json();
            console.log("data",data)

            if (!response.ok) {
                throw new Error(data.message || 'Failed to initiate payment retry');
            }

            if (data.success && data.orderId && data.amount && data.key) {
                // Initialize Razorpay payment
                const options = {
                    key: data.key,
                    amount: data.amount,
                    currency: 'INR',
                    order_id: data.orderId,
                    handler: async function (response) {
                        try {
                            // Verify payment
                            const verifyResponse = await fetch('/verify-razorpay-payment', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                },
                                body: JSON.stringify({
                                    razorpay_order_id: response.razorpay_order_id,
                                    razorpay_payment_id: response.razorpay_payment_id,
                                    razorpay_signature: response.razorpay_signature,
                                    orderId: data.originalOrderId
                                })
                            });

                            const verifyData = await verifyResponse.json();
                            console.log(verifyData)

                            if (verifyData.success) {
                                await Swal.fire({
                                    title: 'Success!',
                                    text: 'Payment successful!',
                                    icon: 'success',
                                    confirmButtonColor: '#4361ee'
                                });
                                window.location.href = `/order-success?orderId=${data.originalOrderId}`;
                            } else {
                                throw new Error(verifyData.message || 'Payment verification failed');
                            }
                        } catch (error) {
                            await Swal.fire({
                                title: 'Error!',
                                text: error.message || 'Payment verification failed',
                                icon: 'error',
                                confirmButtonColor: '#4361ee'
                            });
                            window.location.href = `/payment-failure?orderId=${data.originalOrderId}&error=${encodeURIComponent(error.message)}`;
                        }
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>'
                    },
                    theme: {
                        color: '#4361ee'
                    }
                };

                const rzp = new Razorpay(options);
                rzp.on('payment.failed', function (response) {
                    window.location.href = `/payment-failure?orderId=${data.originalOrderId}&error=${encodeURIComponent(response.error.description)}`;
                });
                rzp.open();
            } else {
                throw new Error(data.message || 'Invalid response from server');
            }
        } catch (error) {
            await Swal.fire({
                title: 'Error!',
                text: error.message || 'Failed to connect to payment server',
                icon: 'error',
                confirmButtonColor: '#4361ee'
            });
        }
    }
}
function openReturnModal(orderId, productId) {
    document.getElementById('returnModal').style.display = 'block';
    document.getElementById('returnForm').onsubmit = function(event) {
        event.preventDefault();
        const reason = document.getElementById('returnReason').value;
        const comments = document.getElementById('returnComments').value;

        if (!reason) {
            Swal.fire({
                title: 'Error!',
                text: 'Please select a return reason.',
                icon: 'warning',
                confirmButtonColor: '#f59e0b'
            });
            return;
        }

        $.ajax({
            url: '/returnOrder',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ 
                orderId, 
                productId, 
                reason,
                comments 
            }),
            success: (response) => {
                if (response.success) {
                    Swal.fire({
                        title: 'Return Requested!',
                        text: 'Your return request has been submitted successfully.',
                        icon: 'success',
                        confirmButtonColor: '#4361ee'
                    }).then(() => {
                        window.location.reload();
                    });
                }
            },
            error: (xhr) => {
                const errorMsg = xhr.responseJSON?.message || 'Server error';
                Swal.fire({
                    title: 'Error!',
                    text: errorMsg,
                    icon: 'error',
                    confirmButtonColor: '#4361ee'
                });
            }
        });

        document.getElementById('returnModal').style.display = 'none';
    };
        }

        function downloadInvoice() {
    window.location.href = `/download-invoice/<%= orders.orderid %>`;
}

        window.addEventListener('click', function(event) {
            const returnModal = document.getElementById('returnModal');
            const invoiceModal = document.getElementById('invoiceModal');
            if (event.target === returnModal) {
                returnModal.style.display = 'none';
            }
            if (event.target === invoiceModal) {
                invoiceModal.style.display = 'none';
            }
        });
    </script>
</body>
</html>