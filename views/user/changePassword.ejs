<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Change Password</title>
    <link rel="stylesheet" href="styles.css">
    <link href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" rel="stylesheet">
    <style>
        body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
}

.container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.password-form {
    display: flex;
    flex-direction: column;
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input {
    width: 100%;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.btn-change-password {
    background-color: #007bff;
    color: white;
    border: none;
    padding: 12px;
    border-radius: 4px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.btn-change-password:hover {
    background-color: #0056b3;
}

.error {
    color: red;
    font-size: 0.8em;
    margin-top: 5px;
    display: block;
}
    </style>
</head>
<body>
    <div class="container">
        <form id="changePasswordForm" class="password-form">
            <h2>Change Password</h2>
            
            <div class="form-group">
                <label for="currentPassword">Current Password</label>
                <input 
                    type="password" 
                    id="currentPassword" 
                    name="currentPassword" 
                    required 
                    placeholder="Enter current password"
                >
                <span class="error" id="currentPasswordError"></span>
            </div>
            
            <div class="form-group">
                <label for="newPassword">New Password</label>
                <input 
                    type="password" 
                    id="newPassword" 
                    name="newPassword" 
                    required 
                    placeholder="Enter new password"
                >
                <span class="error" id="newPasswordError"></span>
            </div>
            
            <div class="form-group">
                <label for="confirmPassword">Confirm New Password</label>
                <input 
                    type="password" 
                    id="confirmPassword" 
                    name="confirmPassword" 
                    required 
                    placeholder="Confirm new password"
                >
                <span class="error" id="confirmPasswordError"></span>
            </div>
            
            <button type="submit" class="btn-change-password">Change Password</button>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.all.min.js"></script>
    <script src="script.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('changePasswordForm');
    const currentPassword = document.getElementById('currentPassword');
    const newPassword = document.getElementById('newPassword');
    const confirmPassword = document.getElementById('confirmPassword');

    function clearErrors() {
        document.getElementById('currentPasswordError').textContent = '';
        document.getElementById('newPasswordError').textContent = '';
        document.getElementById('confirmPasswordError').textContent = '';
    }

  
    function validatePasswordStrength(password) {
        const minLength = 8;
        const hasUpperCase = /[A-Z]/.test(password);
        const hasLowerCase = /[a-z]/.test(password);
        const hasNumbers = /[0-9]/.test(password);
        const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

        return {
            valid: password.length >= minLength && 
                   hasUpperCase && 
                   hasLowerCase && 
                   hasNumbers && 
                   hasSpecialChar,
            message: 'Password must be at least 8 characters long and include uppercase, lowercase, numbers, and special characters.'
        };
    }

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        clearErrors();

        let isValid = true;

     
        if (!currentPassword.value) {
            document.getElementById('currentPasswordError').textContent = 'Current password is required';
            isValid = false;
        }

    
        const passwordValidation = validatePasswordStrength(newPassword.value);
        if (!passwordValidation.valid) {
            document.getElementById('newPasswordError').textContent = passwordValidation.message;
            isValid = false;
        }

   
        if (newPassword.value !== confirmPassword.value) {
            document.getElementById('confirmPasswordError').textContent = 'Passwords do not match';
            isValid = false;
        }

        if (!isValid) return;

        try {
            const response = await fetch('/change-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    currentPassword: currentPassword.value,
                    newPassword: newPassword.value
                })
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire({
                    title: 'Success!',
                    text: 'Your password has been changed successfully.',
                    icon: 'success',
                    confirmButtonText: 'OK'
                })
            ;
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: result.message || 'Failed to change password.',
                    icon: 'error',
                    confirmButtonText: 'Try Again'
                });
            }
        } catch (error) {
            Swal.fire({
                title: 'Network Error!',
                text: 'Unable to connect to the server.',
                icon: 'error',
                confirmButtonText: 'OK'
            });
        }
    });
});
</script>
</body>

</html>