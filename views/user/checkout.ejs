<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <link rel="stylesheet" href="/css/user-profile.css">
    <style>
        :root {
            --primary-color: #3b82f6;
            --secondary-color: #f1f5f9;
            --accent-color: #22c55e;
            --text-color: #1e293b;
            --border-color: #e5e7eb;
            --shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background: linear-gradient(135deg, var(--secondary-color), #dbeafe);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 30px auto;
            padding: 20px;
            display: flex;
            gap: 30px;
        }

        .main-content {
            flex: 2;
        }

        .sidebar {
            flex: 1;
            position: sticky;
            top: 30px;
            height: fit-content;
        }

        .card {
            background: white;
            border-radius: 16px;
            box-shadow: var(--shadow);
            padding: 25px;
            margin-bottom: 20px;
            transition: transform 0.3s ease;
        }

        .card:hover {
            transform: translateY(-5px);
        }

        h2 {
            color: var(--primary-color);
            font-size: 24px;
            margin-bottom: 20px;
            position: relative;
        }

        h2::after {
            content: '';
            position: absolute;
            bottom: -5px;
            left: 0;
            width: 50px;
            height: 3px;
            background: var(--accent-color);
        }

        .address-option,
        .payment-option {
            padding: 15px;
            border: 2px solid var(--border-color);
            border-radius: 10px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .address-option:hover,
        .payment-option:hover {
            border-color: var(--primary-color);
            background: rgba(59, 130, 246, 0.05);
        }

        .address-option.selected,
        .payment-option.selected {
            border-color: var(--accent-color);
            background: rgba(34, 197, 94, 0.1);
        }

        .btn {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 14px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s ease;
            width: 100%;
            font-weight: 600;
        }

        .btn:hover {
            background: #2563eb;
            transform: scale(1.02);
        }

        .btn-secondary {
            background: #6b7280;
        }

        .order-item {
            display: flex;
            align-items: center;
            padding: 15px;
            border-bottom: 1px solid var(--border-color);
            background: rgba(243, 244, 246, 0.5);
            border-radius: 8px;
            margin-bottom: 10px;
        }

        .order-item img {
            width: 70px;
            height: 70px;
            object-fit: cover;
            border-radius: 8px;
            margin-right: 15px;
        }

        .total-breakdown {
            padding: 20px 0;
        }

        .total-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 12px;
            font-size: 15px;
        }

        .grand-total {
            font-weight: bold;
            font-size: 20px;
            color: var(--primary-color);
            padding-top: 15px;
            border-top: 2px dashed var(--border-color);
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(3px);
        }

        .modal-content {
            background: white;
            margin: 10% auto;
            padding: 30px;
            border-radius: 16px;
            width: 90%;
            max-width: 450px;
            box-shadow: var(--shadow);
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateY(-50px);
                opacity: 0;
            }

            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
        }

        .form-control {
            width: 100%;
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            border-color: var(--primary-color);
            outline: none;
            box-shadow: 0 0 5px rgba(59, 130, 246, 0.3);
        }

        .success-message {
            display: none;
            text-align: center;
            padding: 40px;
            background: white;
            border-radius: 16px;
            box-shadow: var(--shadow);
            margin: 30px auto;
            max-width: 500px;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }

            to {
                opacity: 1;
            }
        }

        .success-message svg {
            width: 100px;
            height: 100px;
            margin-bottom: 25px;
        }

        .coupon-section {
            margin-bottom: 20px;
            padding-bottom: 15px;
            border-bottom: 1px dashed var(--border-color);
        }

        .coupon-input {
            display: flex;
            gap: 10px;
            margin-top: 10px;
        }

        .coupon-input input {
            flex: 1;
            padding: 12px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            font-size: 14px;
        }

        .apply-btn {
            background: var(--accent-color);
            flex: 0 0 100px;
        }

        .apply-btn:hover {
            background: #15803d;
        }

        .coupon-tag {
            display: none;
            background: rgba(34, 197, 94, 0.1);
            border: 1px solid var(--accent-color);
            border-radius: 6px;
            padding: 8px 12px;
            margin-top: 12px;
            font-size: 14px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .coupon-tag.applied {
            display: flex;
        }

        .coupon-tag span {
            color: var(--accent-color);
            font-weight: 600;
        }

        .remove-coupon {
            color: #ef4444;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 12px;
            padding: 4px 8px;
            border-radius: 4px;
            transition: all 0.2s ease;
        }

        .remove-coupon:hover {
            background: rgba(239, 68, 68, 0.1);
        }

        .coupon-discount,
        .product-discount {
            color: var(--accent-color);
            font-weight: 500;
        }

        .coupon-modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.6);
            backdrop-filter: blur(3px);
            z-index: 1000;
        }

        .coupon-modal-content {
            background: white;
            margin: 10% auto;
            padding: 20px;
            border-radius: 16px;
            width: 90%;
            max-width: 500px;
            box-shadow: var(--shadow);
            animation: slideIn 0.3s ease;
            max-height: 80vh;
            overflow-y: auto;
        }

        .coupon-list {
            margin-top: 20px;
        }

        .coupon-item {
            padding: 15px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            margin-bottom: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .coupon-item:hover {
            border-color: var(--primary-color);
            background: rgba(59, 130, 246, 0.05);
        }

        .coupon-item.selected {
            border-color: var(--accent-color);
            background: rgba(34, 197, 94, 0.1);
        }

        .coupon-details {
            font-size: 14px;
        }

        .coupon-apply-btn {
            background: var(--accent-color);
            padding: 8px 16px;
            font-size: 14px;
            flex-shrink: 0;
        }

        .coupon-apply-btn:hover {
            background: #15803d;
        }

        @media (max-width: 900px) {
            .container {
                flex-direction: column;
                padding: 15px;
            }

            .sidebar {
                position: static;
            }
        }
    </style>
</head>
<%- include("../../views/partials/user/header") %>

<body>
    <div class="container">
        <div class="main-content">
            <div class="card">
                <h2>Shipping Address</h2>
                <div id="address-list">
                    <% if (addresses && addresses.length > 0) { %>
                    <% addresses.forEach((address, index) => { %>
                    <div class="address-option <%= address.isDefault ? 'selected' : '' %>">
                        <input type="radio" name="address" <%= address.isDefault ? 'checked' : '' %>
                            data-id="<%= address._id || index %>">
                        <div>
                            <strong><%= address.name %></strong> (<%= address.addressType %>)<br>
                            <%= address.street || '' %><%= address.landMark ? ', ' + address.landMark : '' %>,
                            <%= address.city %>, <%= address.state %> <%= address.pincode %><br>
                            Phone: <%= address.phone || 'N/A' %>
                            <% if (address.altPhone) { %> | Alt: <%= address.altPhone %> <% } %>
                        </div>
                    </div>
                    <% }) %>
                    <% } else { %>
                    <p>No addresses found. Please add one.</p>
                    <% } %>
                </div>
                <button class="btn btn-secondary" id="add-address-btn">Add New Address</button>
            </div>

            <div class="card">
                <h2>Payment Method</h2>
                <div id="payment-section">
                    <div class="payment-option selected" data-method="cod">
                        <input type="radio" name="payment-method" id="cod" checked>
                        <label for="cod">Cash on Delivery</label>
                    </div>
                    <div class="payment-option" data-method="razorpay">
                        <input type="radio" name="payment-method" id="razorpay">
                        <label for="razorpay">RazorPay</label>
                    </div>
                    <div class="payment-option" data-method="wallet">
                        <input type="radio" name="payment-method" id="wallet">
                        <label for="wallet">Wallet (Balance: ₹<span id="wallet-balance">0.00</span>)</label>
                    </div>
                </div>
            </div>
        </div>

        <div class="sidebar">
            <div class="card">
                <h2>Your Order</h2>
                <div id="order-items">
                    <% if (cartItems && cartItems.length > 0) { %>
                    <% cartItems.forEach(item => { %>
                    <div class="order-item">
                        <img src="<%= (item.productImage || '/images/default-product.jpg') %>"
                            alt="<%= item.productName || 'Product' %>">
                        <div>
                            <strong><%= item.productName %></strong><br>
                            Size: <%= item.size %> | Qty: <%= item.quantity %> | ₹<%= item.salePrice.toFixed(2) %>
                            <% if (item.discount > 0) { %>
                            <br><span style="color: #22c55e;">(Save ₹<%= item.discount.toFixed(2) %>)</span>
                            <% } %>
                            <% if (item.productOffer > 0) { %>
                            <br><span style="color: #22c55e;">(<%= item.productOffer %>% off)</span>
                            <% } %>
                        </div>
                    </div>
                    <% }) %>
                    <% } else { %>
                    <p>Your cart is empty.</p>
                    <% } %>
                </div>

                <div class="coupon-section">
                    <h3>Have a coupon?</h3>
                    <div class="coupon-input" id="coupon-code">
                       
                        <button id="apply-coupon" class="btn apply-btn"></button>
                    </div>
                    <button id="choose-coupon-btn" class="btn btn-secondary"
                        style="margin-top: 10px; background: #6b7280;">Choose a Coupon</button>
                    <div id="coupon-tag" class="coupon-tag">
                        <span id="coupon-code-display"></span>
                        <button id="remove-coupon" class="remove-coupon">Remove</button>
                    </div>
                </div>

                <div class="total-breakdown">
                    <div class="total-row">
                        <span>Regular Price:</span>
                        <span id="regular-total">₹<%= totals.regularTotal %></span>
                    </div>
                    <div class="total-row" id="product-discount-row" <%= totals.discount == '0.00' ? 'style="display: none;"' : '' %>>
                        <span>Product Discount:</span>
                        <span id="product-discount" class="product-discount">-₹<%= totals.discount %></span>
                    </div>
                    <div class="total-row">
                        <span>Shipping:</span>
                        <span id="shipping">₹<%= totals.shipping %></span>
                    </div>
                    <div class="total-row" id="coupon-discount-row" style="display: none;">
                        <span>Coupon Discount:</span>
                        <span id="coupon-discount" class="coupon-discount">-₹0.00</span>
                    </div>
                    <div class="total-row grand-total">
                        <span>Total:</span>
                        <span id="grand-total">₹<%= totals.total %></span>
                    </div>
                </div>
                <button class="btn" id="place-order-btn">Place Order</button>
            </div>
        </div>

        <!-- Address Modal -->
        <div id="address-modal" class="modal">
            <div class="modal-content">
                <span class="close" onclick="closeModal()"
                    style="float: right; cursor: pointer; font-size: 24px;">×</span>
                <h2 id="address-modal-title">Add New Address</h2>
                <form id="address-form">
                    <input type="hidden" id="address-id">
                    <div class="form-group">
                        <label for="address-type">Address Type</label>
                        <select id="address-type" name="address-type" class="form-control">
                            <option value="Home">Home</option>
                            <option value="Work">Work</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="address-full-name">Full Name</label>
                        <input type="text" id="address-full-name" name="address-full-name" class="form-control">
                        <span class="error-message" id="name-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="address-line1">Address Line 1</label>
                        <input type="text" id="address-line1" name="address-line1" class="form-control">
                        <span class="error-message" id="address-line1-error"></span>
                    </div>
                    <div class="form-group">
                        <label for="address-line2">Landmark</label>
                        <input type="text" id="address-line2" name="address-line2" class="form-control">
                        <span class="error-message" id="address-line2-error"></span>
                    </div>
                    <div class="form-row" style="display: flex; gap: 20px;">
                        <div class="form-group" style="flex: 1;">
                            <label for="address-city">City</label>
                            <input type="text" id="address-city" name="address-city" class="form-control">
                            <span class="error-message" id="city-error"></span>
                        </div>
                        <div class="form-group" style="flex: 1;">
                            <label for="address-state">State/Province</label>
                            <input type="text" id="address-state" name="address-state" class="form-control">
                            <span class="error-message" id="state-error"></span>
                        </div>
                    </div>
                    <div class="form-row" style="display: flex; gap: 20px;">
                        <div class="form-group" style="flex: 1;">
                            <label for="address-zip">ZIP/Postal Code</label>
                            <input type="text" id="address-zip" name="address-zip" class="form-control"
                                pattern="[0-9]{6}">
                            <span class="error-message" id="zip-error"></span>
                        </div>
                        <div class="form-group" style="flex: 1;">
                            <label for="address-country">Country</label>
                            <select id="address-country" name="address-country" class="form-control">
                                <option value="">Select a country</option>
                                <option value="India">India</option>
                                <option value="US">United States</option>
                                <option value="CA">Canada</option>
                                <option value="UK">United Kingdom</option>
                                <option value="AU">Australia</option>
                            </select>
                            <span class="error-message" id="country-error"></span>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="address-phone">Phone Number</label>
                        <input type="tel" id="address-phone" name="address-phone" class="form-control"
                            pattern="[0-9]{10}">
                        <span class="error-message" id="phone-error"></span>
                    </div>
                    <div class="form-group">
                        <label>
                            <input type="checkbox" id="address-default" name="address-default">
                            Set as default address
                        </label>
                    </div>
                    <div class="form-actions" style="display: flex; gap: 10px;">
                        <button type="button" class="btn btn-secondary" id="cancel-address"
                            onclick="closeModal()">Cancel</button>
                        <button type="submit" class="btn">Save Address</button>
                    </div>
                </form>
            </div>
        </div>

        <!-- Coupon Selection Modal -->
        <div id="coupon-modal" class="coupon-modal">
            <div class="coupon-modal-content">
                <span class="close" onclick="closeCouponModal()"
                    style="float: right; cursor: pointer; font-size: 24px;">×</span>
                <h2>Available Coupons</h2>
                <div id="coupon-list" class="coupon-list">
                    <!-- Coupons will be populated dynamically -->
                </div>
            </div>
        </div>
    </div>

    <script>
        const addresses = `<%- JSON.stringify(addresses || []) %>`;
        const cartItemsData = `<%- JSON.stringify(cartItems || []) %>`;

        const addressList = document.getElementById('address-list');
        const orderItems = document.getElementById('order-items');
        const addAddressBtn = document.getElementById('add-address-btn');
        const placeOrderBtn = document.getElementById('place-order-btn');
        const addressModal = document.getElementById('address-modal');
        const addressForm = document.getElementById('address-form');
        const applyCouponBtn = document.getElementById('apply-coupon');
        const removeCouponBtn = document.getElementById('remove-coupon');
        const couponInput = document.getElementById('coupon-code');
        const couponTag = document.getElementById('coupon-tag');
        const couponCodeDisplay = document.getElementById('coupon-code-display');
        const couponDiscountRow = document.getElementById('coupon-discount-row');
        const couponDiscountEl = document.getElementById('coupon-discount');
        const productDiscountRow = document.getElementById('product-discount-row');
        const productDiscountEl = document.getElementById('product-discount');
        const chooseCouponBtn = document.getElementById('choose-coupon-btn');
        const couponModal = document.getElementById('coupon-modal');
        const couponList = document.getElementById('coupon-list');

        let appliedCoupon = null;
        let couponDiscount = 0;
        let originalTotal = 0;

        function fetchWalletBalance() {
            fetch('/check-wallet-balance')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        document.getElementById('wallet-balance').textContent = data.balance.toFixed(2);
                    } else {
                        document.getElementById('wallet-balance').textContent = '0.00';
                    }
                })
                .catch(err => {
                    console.error('Error fetching wallet balance:', err);
                    document.getElementById('wallet-balance').textContent = '0.00';
                });
        }

        function updatePaymentOptions() {
            const totalAmountText = document.getElementById('grand-total').textContent;
            const totalAmount = parseFloat(totalAmountText.replace('₹', ''));

            const codOption = document.querySelector('.payment-option[data-method="cod"]');
            const codInput = document.getElementById('cod');

            if (totalAmount > 1000) {
                codOption.classList.add('disabled');
                codOption.style.opacity = '0.6';
                codOption.style.cursor = 'not-allowed';
                codInput.disabled = true;

                if (codOption.classList.contains('selected')) {
                    codOption.classList.remove('selected');
                    const razorpayOption = document.querySelector('.payment-option[data-method="razorpay"]');
                    razorpayOption.classList.add('selected');
                    document.getElementById('razorpay').checked = true;
                }

                if (!document.getElementById('cod-limit-message')) {
                    const messageDiv = document.createElement('div');
                    messageDiv.id = 'cod-limit-message';
                    messageDiv.style.color = '#ef4444';
                    messageDiv.style.fontSize = '12px';
                    messageDiv.style.marginTop = '5px';
                    messageDiv.textContent = 'COD unavailable for orders above ₹1000';
                    codOption.appendChild(messageDiv);
                }
            } else {
                codOption.classList.remove('disabled');
                codOption.style.opacity = '1';
                codOption.style.cursor = 'pointer';
                codInput.disabled = false;

                const message = document.getElementById('cod-limit-message');
                if (message) {
                    message.remove();
                }
            }
        }

        function updateTotals() {
            let regularTotal = 0;
            let productDiscount = 0;
            let subtotal = 0; 

            try {
                const parsedCartItems = JSON.parse(cartItemsData);
                parsedCartItems.forEach(item => {
                    regularTotal += parseFloat(item.regularPrice * item.quantity || 0);
                    productDiscount += parseFloat(item.discount || 0); 
                    subtotal += parseFloat(item.totalPrice || 0);
                });
            } catch (e) {
                console.error("Error parsing cart items:", e);
            }

            const shippingCost =40; 
            let total = subtotal + shippingCost; 
            originalTotal = total;

            if (appliedCoupon) {
                couponDiscount = appliedCoupon.offerPrice;
                total -= couponDiscount;
                couponDiscountRow.style.display = 'flex';
                couponDiscountEl.textContent = `-₹${couponDiscount.toFixed(2)}`;
            } else {
                couponDiscountRow.style.display = 'none';
            }

            if (productDiscount > 0) {
                productDiscountRow.style.display = 'flex';
                productDiscountEl.textContent = `-₹${productDiscount.toFixed(2)}`;
            } else {
                productDiscountRow.style.display = 'none';
            }

            document.getElementById('regular-total').textContent = `₹${regularTotal.toFixed(2)}`;
            document.getElementById('shipping').textContent = `₹${shippingCost.toFixed(2)}`;
            document.getElementById('grand-total').textContent = `₹${total.toFixed(2)}`;

            updatePaymentOptions();
        }

        function applyCoupon(code) {
            fetch(`/apply-coupon?code=${encodeURIComponent(code)}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        appliedCoupon = data.coupon;
                 couponCodeDisplay.textContent = appliedCoupon.name;
            couponTag.classList.add('applied');
            couponTag.style.display = 'flex'; 
                        if (originalTotal < data.coupon.minimumPrice) {
                            Swal.fire({
                                icon: 'warning',
                                title: 'Minimum Order Value Not Met',
                                text: `This coupon requires a minimum order of ₹${data.coupon.minimumPrice}`,
                                confirmButtonColor: '#3b82f6'
                            });
                            return;
                        }
                        appliedCoupon = data.coupon;
                        couponCodeDisplay.textContent = appliedCoupon.name;
                        couponTag.classList.add('applied');
                        Swal.fire({
                            icon: 'success',
                            title: 'Coupon Applied',
                            text: `₹${appliedCoupon.offerPrice} discount applied!`,
                            confirmButtonColor: '#22c55e'
                        });
                        updateTotals();
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Invalid Coupon',
                            text: data.message || 'This coupon is invalid or expired',
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error applying coupon:", err);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to apply coupon: ' + err.message,
                        confirmButtonColor: '#3b82f6'
                    });
                });
        }

        function removeCoupon() {
            appliedCoupon = null;
            couponTag.classList.remove('applied');
            couponCodeDisplay.textContent = '';
            couponInput.value = '';
            couponTag.style.display = 'none';
            updateTotals();
        }

        function openCouponModal() {
            fetch('/get-coupons')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! Status: ${response.status}`);
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success && data.coupons.length > 0) {
                        couponList.innerHTML = '';
                        data.coupons.forEach(coupon => {
                            const isApplicable = originalTotal >= coupon.minimumPrice;
                            const couponItem = document.createElement('div');
                            couponItem.classList.add('coupon-item');
                            couponItem.innerHTML = `
                                <div class="coupon-details">
                                    <strong>${coupon.name}</strong><br>
                                    ₹${coupon.offerPrice} off (Min. ₹${coupon.minimumPrice})<br>
                                    Expires: ${new Date(coupon.expireOn).toLocaleDateString('en-GB')}
                                    ${!isApplicable ? '<span style="color: #ef4444;">(Order value too low)</span>' : ''}
                                </div>
                                <button class="btn coupon-apply-btn" ${!isApplicable ? 'disabled' : ''}>Apply</button>
                            `;
                            couponItem.querySelector('.coupon-apply-btn').addEventListener('click', () => {
                                applyCoupon(coupon.name);
                                closeCouponModal();
                            });
                            couponList.appendChild(couponItem);
                        });
                        couponModal.style.display = 'block';
                    } else {
                        Swal.fire({
                            icon: 'info',
                            title: 'No Coupons Available',
                            text: 'There are no active coupons at this time.',
                            confirmButtonColor: '#3b82f6'
                        });
                    }
                })
                .catch(err => {
                    console.error("Error fetching coupons:", err);
                    Swal.fire({
                        icon: 'error',
                        title: 'Error',
                        text: 'Failed to load coupons: ' + err.message,
                        confirmButtonColor: '#3b82f6'
                    });
                });
        }

        function closeCouponModal() {
            couponModal.style.display = 'none';
        }

        function openModal() {
            addressModal.style.display = 'block';
            document.getElementById('address-modal-title').textContent = 'Add New Address';
            addressForm.reset();
        }

        function closeModal() {
            addressModal.style.display = 'none';
        }

        function saveAddress(e) {
            e.preventDefault();
            const addressData = {
                addressType: document.getElementById('address-type').value,
                name: document.getElementById('address-full-name').value,
                addressLine1: document.getElementById('address-line1').value,
                landMark: document.getElementById('address-line2').value || '',
                city: document.getElementById('address-city').value,
                state: document.getElementById('address-state').value,
                pincode: document.getElementById('address-zip').value,
                country: document.getElementById('address-country').value,
                phone: document.getElementById('address-phone').value,
                isDefault: document.getElementById('address-default').checked
            };

            fetch('/add-address', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(addressData)
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(data => {
                        throw new Error(data.message || `Server error: ${response.status}`);
                    });
                }
                return response.json();
            })
            .then(data => {
                if (data.message === 'Address added successfully') {
                    Swal.fire({
                        icon: 'success',
                        title: 'Success',
                        text: 'Address added',
                        confirmButtonColor: '#3085d6'
                    });
                    addressModal.style.display = 'none';
                    window.location.reload();
                }
            })
            .catch(err => {
                console.error("Error saving address:", err);
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Failed to add address: ' + err.message,
                    confirmButtonColor: '#3b82f6'
                });
            });
        }

        function placeOrder() {
            const selectedAddress = document.querySelector('input[name="address"]:checked');
            const selectedPaymentInput = document.querySelector('input[name="payment-method"]:checked');

            if (!selectedAddress) {
                Swal.fire({
                    title: 'Missing Address',
                    text: 'Please select a shipping address',
                    icon: 'warning',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }

            if (!selectedPaymentInput) {
                Swal.fire({
                    title: 'Missing Payment',
                    text: 'Please select a payment method',
                    icon: 'warning',
                    confirmButtonColor: '#3b82f6'
                });
                return;
            }

            const selectedPaymentOption = selectedPaymentInput.closest('.payment-option');
            const paymentMethod = selectedPaymentOption.dataset.method;

            Swal.fire({
                title: 'Confirm Order',
                text: 'Are you sure you want to place this order?',
                icon: 'question',
                showCancelButton: true,
                confirmButtonColor: '#22c55e',
                cancelButtonColor: '#6b7280',
                confirmButtonText: 'Yes, place order!',
                cancelButtonText: 'Cancel'
            }).then((result) => {
                if (result.isConfirmed) {
                    updateTotals();

                    let subtotal = 0;
                    let productDiscount = 0;
                    try {
                        const parsedCartItems = JSON.parse(cartItemsData);
                        parsedCartItems.forEach(item => {
                            subtotal += parseFloat(item.totalPrice || 0);
                            productDiscount += parseFloat(item.discount || 0);
                        });
                    } catch (e) {
                        console.error("Error parsing cart items:", e);
                    }

                    const shippingCost = 40;
                    let total = subtotal + shippingCost;
                    if (appliedCoupon) {
                        total -= appliedCoupon.offerPrice;
                    }

                    const totalAmount = total;

                    console.log("Total Amount (with coupon and shipping): ₹", totalAmount.toFixed(2));

                    const orderData = {
                        addressId: selectedAddress.dataset.id,
                        paymentMethod: paymentMethod,
                        couponCode: appliedCoupon ? appliedCoupon.name : null,
                        amount: totalAmount,
                        couponDiscount: appliedCoupon ? appliedCoupon.offerPrice : 0
                    };

                    console.log("Order Data:", orderData);

                    if (paymentMethod === 'wallet') {
                        fetch('/check-wallet-balance')
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error(`Server error: ${response.status}`);
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (!data.success || data.balance < totalAmount) {
                                    Swal.close();
                                    Swal.fire({
                                        title: 'Insufficient Wallet Balance',
                                        text: `Your wallet balance (₹${data.balance?.toFixed(2) || '0.00'}) is insufficient for this order (₹${totalAmount.toFixed(2)}). Please choose another payment method.`,
                                        icon: 'error',
                                        confirmButtonColor: '#3b82f6'
                                    });
                                    return;
                                }
                                processOrder(orderData);
                            })
                            .catch(err => {
                                Swal.close();
                                Swal.fire({
                                    title: 'Error',
                                    text: 'Failed to check wallet balance: ' + err.message,
                                    icon: 'error',
                                    confirmButtonColor: '#3b82f6'
                                });
                            });
                    } else {
                        processOrder(orderData);
                    }
                }
            });
        }

        function processOrder(orderData) {
            Swal.fire({
                title: 'Processing...',
                html: 'Please wait while we process your order.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch('/place-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(orderData)
            })
            .then(response => {
                if (!response.ok) {
                    console.log("this error is throwing")
                    throw new Error(`Server error: ${response.status}`);
                }
                console.log("this is the response",response)
                return response.json();
            })
            .then(data => {
                Swal.close();
                console.log("this is the data from the backend and the data is suceses",data)
                if (data.success) {
                    if (orderData.paymentMethod === 'cod') {
                        processCODOrder(data.orderId);
                    } else if (orderData.paymentMethod === 'razorpay') {
                        console.log( "req reached here",data.orderId)
                        processRazorpayOrder(data.orderId, data.amount);
                    } else if (orderData.paymentMethod === 'wallet') {
                        processWalletOrder(data.orderId);
                    }
                } else {
                    throw new Error(data.message || 'Failed to place order');
                }
            })
            .catch(err => {
                Swal.close();
                Swal.fire({
                    title: 'Error',
                    text: 'An unexpected error occurred: ' + err.message,
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                }).then(() => {
                    window.location.href =
                        `/payment-failure?orderId=${data.orderId || 'unknown'}&error=${encodeURIComponent(err.message)}`;
                });
            });
        }

        function processCODOrder(orderId) {
            Swal.fire({
                title: 'Order Confirmed!',
                html: `Your order #<strong>${orderId}</strong> has been placed successfully.<br>Thank you for shopping with us!`,
                icon: 'success',
                confirmButtonColor: '#22c55e',
                confirmButtonText: 'View Order Details'
            }).then(() => {
                window.location.href = `/order-success?orderId=${orderId}`;
            });
        }

        function processWalletOrder(orderId) {
            Swal.fire({
                title: 'Order Confirmed!',
                html: `Your order #<strong>${orderId}</strong> has been placed successfully using your wallet.<br>Thank you for shopping with us!`,
                icon: 'success',
                confirmButtonColor: '#22c55e',
                confirmButtonText: 'View Order Details'
            }).then(() => {
                window.location.href = `/order-success?orderId=${orderId}`;
            });
        }

        function processRazorpayOrder(orderId, amount) {
            fetch('/create-razorpay-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    amount
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                if (!data.success) {
                    throw new Error(data.message || 'Failed to create Razorpay order');
                }

                const options = {
                    key: data.key,
                    amount: data.amount,
                    currency: 'INR',
                    name: 'Wear Aura',
                    description: 'Order Payment',
                    order_id: data.orderId,
                    handler: function (response) {
                        verifyPayment(response, orderId);
                    },
                    prefill: {
                        name: 'Customer',
                        email: 'customer@example.com',
                        contact: '9400359562'
                    },
                    theme: {
                        color: '#3b82f6'
                    },
                    modal: {
                        ondismiss: function () {
                            window.location.href =
                                `/payment-failure?orderId=${orderId}&error=${encodeURIComponent('Payment cancelled by user')}`;
                        }
                    }
                };

                const rzp = new Razorpay(options);
                rzp.open();
            })
            .catch(err => {
                Swal.fire({
                    title: 'Error',
                    text: 'Failed to initiate payment: ' + err.message,
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                }).then(() => {
                    window.location.href =
                        `/payment-failure?orderId=${orderId}&error=${encodeURIComponent(err.message)}`;
                });
            });
        }

        function verifyPayment(response, orderId) {
            const paymentData = {
                razorpay_order_id: response.razorpay_order_id,
                razorpay_payment_id: response.razorpay_payment_id,
                razorpay_signature: response.razorpay_signature,
                orderId: orderId
            };

            Swal.fire({
                title: 'Verifying Payment...',
                html: 'Please wait.',
                allowOutsideClick: false,
                didOpen: () => {
                    Swal.showLoading();
                }
            });

            fetch('/verify-razorpay-payment', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(paymentData)
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Server error: ${response.status}`);
                }
                return response.json();
            })
            .then(data => {
                Swal.close();
                if (data.success) {
                    Swal.fire({
                        title: 'Payment Successful!',
                        html: `Your order #<strong>${orderId}</strong> has been placed successfully.<br>Thank you for shopping with us!`,
                        icon: 'success',
                        confirmButtonColor: '#22c55e',
                        confirmButtonText: 'View Order Details'
                    }).then(() => {
                        window.location.href = `/payment-success?orderId=${orderId}`;
                    });
                } else {
                    window.location.href = data.redirect ||
                        `/payment-failure?orderId=${orderId}&error=${encodeURIComponent(data.message)}`;
                }
            })
            .catch(err => {
                Swal.close();
                Swal.fire({
                    title: 'Payment Failed',
                    text: 'An error occurred during verification: ' + err.message,
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                }).then(() => {
                    window.location.href =
                        `/payment-failure?orderId=${orderId}&error=${encodeURIComponent(err.message)}`;
                });
            });
        }

        function retryPayment(orderId) {
            Swal.fire({
                title: 'Retrying Payment',
                text: 'Preparing to retry your payment...',
                icon: 'info',
                showCancelButton: true,
                confirmButtonColor: '#22c55e',
                cancelButtonColor: '#ef4444',
                confirmButtonText: 'Proceed',
                cancelButtonText: 'Cancel Order'
            }).then((result) => {
                if (result.isConfirmed) {
                    processRazorpayOrder(orderId, parseFloat(document.getElementById('grand-total').textContent
                        .replace('₹', '')));
                } else if (result.isDismissed) {
                    cancelPendingOrder(orderId);
                }
            });
        }

        function cancelPendingOrder(orderId) {
            fetch('/cancel-order', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    orderId,
                    productId: null,
                    orderMainId: orderId
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        title: 'Order Cancelled',
                        text: 'Your pending order has been cancelled.',
                        icon: 'info',
                        confirmButtonColor: '#3b82f6'
                    }).then(() => {
                        window.location.href = '/';
                    });
                } else {
                    throw new Error(data.message || 'Failed to cancel order');
                }
            })
            .catch(err => {
                Swal.fire({
                    title: 'Error',
                    text: 'Failed to cancel order: ' + err.message,
                    icon: 'error',
                    confirmButtonColor: '#3b82f6'
                });
            });
        }

        addAddressBtn.addEventListener('click', openModal);
        addressForm.addEventListener('submit', saveAddress);
        placeOrderBtn.addEventListener('click', placeOrder);
        applyCouponBtn.addEventListener('click', () => applyCoupon(couponInput.value.trim().toUpperCase()));
        removeCouponBtn.addEventListener('click', removeCoupon);
        chooseCouponBtn.addEventListener('click', openCouponModal);
        window.addEventListener('click', (e) => {
            if (e.target === addressModal) closeModal();
            if (e.target === couponModal) closeCouponModal();
        });
        couponInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                applyCoupon(couponInput.value.trim().toUpperCase());
            }
        });

        document.querySelectorAll('.payment-option').forEach(option => {
            option.style.cursor = 'pointer';
            option.style.opacity = '1';

            option.addEventListener('click', () => {
                if (
                    (option.dataset.method === 'cod' && !option.classList.contains('disabled')) ||
                    option.dataset.method === 'razorpay' ||
                    option.dataset.method === 'wallet'
                ) {
                    document.querySelectorAll('.payment-option').forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    option.querySelector('input').checked = true;
                }
            });
        });

        document.querySelectorAll('.address-option').forEach(option => {
            option.addEventListener('click', () => {
                document.querySelectorAll('.address-option').forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
                option.querySelector('input').checked = true;
            });
        });

        updateTotals();
        fetchWalletBalance();
    </script>
</body>
<%- include("../../views/partials/user/footer") %>

</html>