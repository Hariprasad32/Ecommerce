<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Admin Dashboard</title>
  <!-- Include Chart.js -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>
  <!-- Include SweetAlert2 -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://kit.fontawesome.com/your-fontawesome-kit.js" crossorigin="anonymous"></script>
  <style>
    :root {
      --dark-bg: #121212;
      --card-bg: #1e1e1e;
      --border-color: #333;
      --text-color: #e0e0e0;
      --primary: #3a86ff;
      --input-bg: #2c2c2c;
      --radius: 0.5rem;
    }

    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif;
    }

    body {
      background-color: var(--dark-bg);
      color: var(--text-color);
      min-height: 100vh;
    }

    .header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 1rem;
      background-color: var(--card-bg);
      border-bottom: 1px solid var(--border-color);
    }

    .header-left {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .sidebar-toggle {
      background: none;
      border: none;
      color: var(--text-color);
      font-size: 1.5rem;
      cursor: pointer;
    }

    .header-right {
      display: flex;
      align-items: center;
      gap: 1.5rem;
    }

    .search-container {
      position: relative;
    }

    .search-container input {
      padding: 0.5rem 2rem 0.5rem 0.75rem;
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      background-color: var(--input-bg);
      color: var(--text-color);
    }

    .search-container .fas {
      position: absolute;
      right: 0.75rem;
      top: 50%;
      transform: translateY(-50%);
      color: var(--text-color);
    }

    .notification {
      position: relative;
      font-size: 1.25rem;
      cursor: pointer;
    }

    .notification .badge {
      position: absolute;
      top: -5px;
      right: -10px;
      background-color: #dc3545;
      color: white;
      border-radius: 50%;
      padding: 2px 6px;
      font-size: 0.75rem;
    }

    .user-profile {
      position: relative;
      cursor: pointer;
    }

    .profile-logo {
      width: 32px;
      height: 32px;
      background-color: var(--primary);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1rem;
      font-weight: bold;
    }

    .user-dropdown {
      position: absolute;
      top: 100%;
      right: 0;
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      min-width: 150px;
      display: none;
      z-index: 1000;
      margin-top: 0;
    }

    .user-profile.active .user-dropdown {
      display: block;
    }

    .dropdown-content a {
      display: flex;
      align-items: center;
      padding: 0.75rem 1rem;
      color: var(--text-color);
      text-decoration: none;
      transition: background-color 0.2s;
    }

    .dropdown-content a:hover {
      background-color: rgba(255, 255, 255, 0.1);
    }

    .dropdown-content a i {
      margin-right: 0.5rem;
    }

    .dashboard-content {
      padding: 2rem;
    }

    .tabs {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .tab-btn {
      padding: 0.5rem 1rem;
      background-color: var(--input-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      color: var(--text-color);
      cursor: pointer;
    }

    .tab-btn.active {
      background-color: var(--primary);
      color: white;
    }

    .tab-pane {
      display: none;
    }

    .tab-pane.active {
      display: block;
    }

    .stats-cards {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: 1rem;
    }

    .card {
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      padding: 1rem;
    }

    .card-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .trend.positive {
      color: #28a745;
    }

    .trend.negative {
      color: #dc3545;
    }

    .charts-section {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 1rem;
      margin-top: 2rem;
    }

    .recent-sales .sale-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.5rem 0;
      border-bottom: 1px solid var(--border-color);
    }

    .sale-info h4 {
      font-size: 1rem;
    }

    .sale-info p {
      font-size: 0.875rem;
      color: #a0a0a0;
    }

    .data-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1rem;
    }

    .data-table th,
    .data-table td {
      padding: 0.75rem;
      border-bottom: 1px solid var(--border-color);
      text-align: left;
    }

    .status {
      padding: 0.25rem 0.5rem;
      border-radius: var(--radius);
      font-size: 0.875rem;
    }

    .status.Delivered {
      background-color: #28a745;
      color: white;
    }

    .status.Processing {
      background-color: #ffc107;
      color: black;
    }

    .status.Pending {
      background-color: #dc3545;
      color: white;
    }

    .status.Shipped {
      background-color: #17a2b8;
      color: white;
    }

    .status.Cancelled {
      background-color: #6c757d;
      color: white;
    }

    .status.Returned {
      background-color: #ff6b6b;
      color: white;
    }

    .report-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 0.75rem 0;
      border-bottom: 1px solid var(--border-color);
    }

    .btn-outline {
      background: none;
      border: 1px solid var(--primary);
      color: var(--primary);
    }

    .btn-outline:hover {
      background-color: var(--primary);
      color: white;
    }

    .filter-container {
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .filter-row {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .filter-btn {
      padding: 0.5rem 1rem;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: var(--radius);
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .filter-btn:hover {
      background: #2b65cc;
    }

    .custom-date-inputs {
      display: flex;
      gap: 1rem;
    }

    .custom-date-inputs select,
    .custom-date-inputs input {
      padding: 0.5rem;
      background: var(--input-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      color: var(--text-color);
    }

    .summary-card {
      display: flex;
      justify-content: space-between;
      background: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      padding: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .summary-item {
      text-align: center;
    }

    .summary-value {
      font-size: 1.5rem;
      font-weight: bold;
      color: var(--primary);
    }

    .summary-label {
      font-size: 0.875rem;
      color: #a0a0a0;
    }

    .pagination {
      display: flex;
      justify-content: center;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
    }

    .pagination-btn {
      padding: 0.5rem 1rem;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: var(--radius);
      text-decoration: none;
      transition: background-color 0.2s;
    }

    .pagination-btn:disabled {
      background: #555;
      cursor: not-allowed;
    }

    .pagination-btn:hover:not(:disabled) {
      background: #2b65cc;
    }

    .page-info {
      font-size: 0.875rem;
      color: #a0a0a0;
    }

    .back-btn {
      padding: 0.5rem 1rem;
      background: var(--primary);
      color: white;
      border: none;
      border-radius: var(--radius);
      cursor: pointer;
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
    }

    .back-btn:hover {
      background: #2b65cc;
    }

    .d-none {
      display: none;
    }

    /* Analytics-specific styles */
    .chart-container {
      position: relative;
      height: 400px;
      margin-bottom: 2rem;
    }

    .filter-bar {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1.5rem;
      padding: 1rem;
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
    }

    .filter-group {
      display: flex;
      align-items: center;
      gap: 1rem;
    }

    .filter-group label {
      margin-right: 0.5rem;
      font-size: 0.875rem;
    }

    .filter-select {
      padding: 0.5rem;
      background: var(--input-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      color: var(--text-color);
    }

    .charts-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 1.5rem;
      margin-bottom: 1.5rem;
    }

    .chart-card {
      background-color: var(--card-bg);
      border: 1px solid var(--border-color);
      border-radius: var(--radius);
      padding: 1.5rem;
    }

    .chart-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
    }

    .chart-title {
      font-size: 1.25rem;
      font-weight: 600;
    }

    .no-data-message {
      display: flex;
      justify-content: center;
      align-items: center;
      height: 300px;
      color: #888;
      font-style: italic;
    }

    @media (min-width: 992px) {
      .charts-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  </style>
</head>

<body>
  <%- include("../../views/partials/admin/header") %>
  <main class="main-content">
    <header class="header">
      <div class="header-left">
        <button id="sidebar-toggle" class="sidebar-toggle">
          <i class="fas fa-bars"></i>
        </button>
        <h1>Dashboard</h1>
      </div>
      <div class="header-right">
        <div class="search-container">
          <!-- <input type="text" placeholder="Search...">
          <i class="fas fa-search"></i> -->
        </div>
        <div class="notification">
          <i class="fas fa-bell"></i>
          <span class="badge">5</span>
        </div>
        <div class="user-profile">
          <div class="profile-logo">A</div>
          <div class="user-dropdown">
            <div class="dropdown-content">
              <a href="#"><i class="fas fa-user"></i> Profile</a>
              <a href="#"><i class="fas fa-cog"></i> Settings</a>
              <a href="/admin/logout"><i class="fas fa-sign-out-alt"></i> Logout</a>
            </div>
          </div>
        </div>
      </div>
    </header>

    <div class="dashboard-content">
      <div class="tabs">
        <button class="tab-btn active" data-tab="overview">Overview</button>
        <button class="tab-btn" data-tab="analytics">Analytics</button>
        <button class="tab-btn" data-tab="reports">Reports</button>
      </div>

      <div class="tab-content">
        <div id="overview" class="tab-pane active">
          <div class="stats-cards">
            <div class="card">
              <div class="card-header">
                <h3>Total Revenue</h3>
                <i class="fas fa-credit-card"></i>
              </div>
              <div class="card-body">
                <h2>₹<%= totalRevenue.toLocaleString() %></h2>
                <p class="trend <%= revenueTrend >= 0 ? 'positive' : 'negative' %>">
                  <%= revenueTrend >= 0 ? '+' : '' %><%= revenueTrend %>% from last month
                </p>
              </div>
            </div>
            <div class="card">
              <div class="card-header">
                <h3>New Customers</h3>
                <i class="fas fa-users"></i>
              </div>
              <div class="card-body">
                <h2>+<%= totalNewCustomers.toLocaleString() %></h2>
                <p class="trend <%= customersTrend >= 0 ? 'positive' : 'negative' %>">
                  <%= customersTrend >= 0 ? '+' : '' %><%= customersTrend %>% from last month
                </p>
              </div>
            </div>
            <div class="card">
              <div class="card-header">
                <h3>Active Orders</h3>
                <i class="fas fa-shopping-cart"></i>
              </div>
              <div class="card-body">
                <h2>+<%= totalActiveOrders.toLocaleString() %></h2>
                <p class="trend <%= activeOrdersTrend >= 0 ? 'positive' : 'negative' %>">
                  <%= activeOrdersTrend >= 0 ? '+' : '' %><%= activeOrdersTrend %>% from last month
                </p>
              </div>
            </div>
            <div class="card">
              <div class="card-header">
                <h3>Pending Orders</h3>
                <i class="fas fa-box"></i>
              </div>
              <div class="card-body">
                <h2>+<%= totalPendingOrders.toLocaleString() %></h2>
                <p class="trend <%= pendingOrdersTrend >= 0 ? 'positive' : 'negative' %>">
                  <%= pendingOrdersTrend >= 0 ? '+' : '' %><%= pendingOrdersTrend %> since yesterday
                </p>
              </div>
            </div>
          </div>

          <div class="charts-section">
            <div class="card chart-card medium">
              <div class="card-header">
                <h3>Recent Sales</h3>
              </div>
              <div class="card-body">
                <div class="recent-sales">
                  <% recentOrders.forEach(order => { %>
                  <div class="sale-item">
                    <img
                      src="<%= order.items[0] && order.items[0].productImage ? `/${order.items[0].productImage}` : 'https://via.placeholder.com/40' %>"
                      alt="Product">
                    <div class="sale-info">
                      <h4><%= order.items[0]?.productName || 'N/A' %></h4>
                      <p><%= order.userId ? order.userId.name : 'Unknown' %></p>
                    </div>
                    <div class="sale-amount">₹<%= order.totalAmount.toLocaleString() %></div>
                  </div>
                  <% }); %>
                </div>
              </div>
            </div>
          </div>

          <div class="card table-card">
            <div class="card-header">
              <h3>Recent Orders</h3>
            </div>
            <div class="card-body">
              <table class="data-table">
                <thead>
                  <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Product</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Status</th>
                  </tr>
                </thead>
                <tbody>
                  <% recentOrders.forEach(order => { %>
                  <tr>
                    <td><%= order.orderId %></td>
                    <td><%= order.userId ? order.userId.name : 'Unknown' %></td>
                    <td><%= order.items[0]?.productName || 'N/A' %></td>
                    <td><%= order.orderDate ? new Date(order.orderDate).toLocaleDateString() : 'N/A' %></td>
                    <td>₹<%= order.totalAmount.toLocaleString() %></td>
                    <td>
                      <% if (order.items && order.items.length > 0) { %>
                        <% order.items.forEach(item => { %>
                          <span class="status <%= item.status %>"><%= item.status %></span><br>
                        <% }); %>
                      <% } else { %>
                        <span class="status N/A">N/A</span>
                      <% } %>
                    </td>
                  </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
        </div>

        <!-- Analytics Tab -->
        <div id="analytics" class="tab-pane">
          <div class="filter-bar">
            <div class="filter-group">
              <label for="time-filter">Time Period:</label>
              <select id="time-filter" class="filter-select">
                <option value="yearly">Yearly</option>
                <option value="monthly" selected>Monthly</option>
                <option value="weekly">Weekly</option>
                <option value="daily">Daily</option>
              </select>
            </div>
            <div class="filter-group">
              <label for="year-filter">Year:</label>
              <select id="year-filter" class="filter-select">
                <option value="2025">2025</option>
                <option value="2024" selected>2024</option>
                <option value="2023">2023</option>
              </select>

              <div id="month-container">
                <label for="month-filter">Month:</label>
                <select id="month-filter" class="filter-select">
                  <option value="0">January</option>
                  <option value="1">February</option>
                  <option value="2">March</option>
                  <option value="3" selected>April</option>
                  <option value="4">May</option>
                  <option value="5">June</option>
                  <option value="6">July</option>
                  <option value="7">August</option>
                  <option value="8">September</option>
                  <option value="9">October</option>
                  <option value="10">November</option>
                  <option value="11">December</option>
                </select>
              </div>

              <div id="week-container" style="display: none;">
                <label for="week-filter">Week:</label>
                <select id="week-filter" class="filter-select">
                  <option value="1">Week 1</option>
                  <option value="2" selected>Week 2</option>
                  <option value="3">Week 3</option>
                  <option value="4">Week 4</option>
                </select>
              </div>
            </div>

            <button id="apply-filter" class="filter-btn">
              <i class="fas fa-filter"></i> Apply Filter
            </button>
          </div>

          <div class="charts-grid">
            <div class="chart-card">
              <div class="chart-header">
                <h3 class="chart-title">Best Selling Products (Top 10)</h3>
              </div>
              <div class="chart-container">
                <canvas id="productsChart"></canvas>
              </div>
            </div>

            <div class="chart-card">
              <div class="chart-header">
                <h3 class="chart-title">Best Selling Categories (Top 10)</h3>
              </div>
              <div class="chart-container">
                <canvas id="categoriesChart"></canvas>
              </div>
            </div>

            <div class="chart-card">
              <div class="chart-header">
                <h3 class="chart-title">Overall Sales Performance</h3>
              </div>
              <div class="chart-container">
                <canvas id="overallSalesChart"></canvas>
              </div>
            </div>

            <div class="chart-card">
              <div class="chart-header">
                <h3 class="chart-title">Sales Performance Over Time</h3>
              </div>
              <div class="chart-container">
                <canvas id="salesTimeChart"></canvas>
              </div>
            </div>
          </div>
        </div>

        <div id="reports" class="tab-pane <%= page === 'reports' ? 'active' : '' %>">
          <div class="card">
            <div class="card-header">
              <h3>Sales Report</h3>
            </div>
            <div class="card-body">
              <div class="filter-container">
                <div class="filter-row">
                  <form id="sales-report-form" method="get">
                    <div class="custom-date-inputs">
                      <select name="period" id="period-select">
                        <option value="all" <%= period === 'all' ? 'selected' : '' %>>All Time</option>
                        <option value="1day" <%= period === '1day' ? 'selected' : '' %>>Last 24 Hours</option>
                        <option value="1week" <%= period === '1week' ? 'selected' : '' %>>Last 7 Days</option>
                        <option value="1month" <%= period === '1month' ? 'selected' : '' %>>Last 30 Days</option>
                        <option value="custom" <%= period === 'custom' ? 'selected' : '' %>>Custom Range</option>
                      </select>
                      <div id="custom-date-fields" class="<%= period === 'custom' ? '' : 'd-none' %>">
                        <input type="date" name="startDate" value="<%= startDate || '' %>" placeholder="Start Date">
                        <input type="date" name="endDate" value="<%= endDate || '' %>" placeholder="End Date">
                      </div>
                      <button type="submit" class="filter-btn">
                        <i class="fas fa-filter"></i> Apply Filter
                      </button>
                      <button type="button" id="download-pdf-btn" class="filter-btn">
                        <i class="fas fa-download"></i> Download PDF
                      </button>
                      <button type="button" id="download-excel-btn" class="filter-btn">
                        <i class="fas fa-file-excel"></i> Download Excel
                      </button>
                    </div>
                  </form>
                </div>
              </div>

              <div id="sales-report-content">
                <div class="summary-card">
                  <div class="summary-item">
                    <div class="summary-value"><%= totalSales.toLocaleString() %></div>
                    <div class="summary-label">Total Revenue</div>
                  </div>
                  <div class="summary-item">
                    <div class="summary-value"><%= totalOrderCount.toLocaleString() %></div>
                    <div class="summary-label">Total Orders</div>
                  </div>
                  <div class="summary-item">
                    <div class="summary-value"><%= totalDiscount.toLocaleString() %></div>
                    <div class="summary-label">Total Discount</div>
                  </div>
                </div>

                <table class="data-table">
                  <thead>
                    <tr>
                      <th>Order Id</th>
                      <th>Customer</th>
                      <th>Date</th>
                      <th>Items</th>
                      <th>Price</th>
                      <th>Amount</th>
                      <th>Status</th>
                      <th>Payment Method</th>
                    </tr>
                  </thead>
                  <tbody id="sales-table-body">
                    <% sales.forEach(sale => { %>
                    <tr>
                      <td><%= sale.orderId %></td>
                      <td><%= sale.userId ? sale.userId.name : 'Unknown' %></td>
                      <td><%= sale.orderDate ? new Date(sale.orderDate).toLocaleDateString() : 'N/A' %></td>
                      <td><%= sale.items.length %></td>
                      <td>₹<%= sale.totalAmount ? sale.totalAmount.toLocaleString() : '0' %></td>
                      <td><%= sale.couponDiscount + sale.items.reduce((sum, item) => sum + (item.discount || 0), 0) %></td>
                      <td>₹<%= sale.totalAmount ? sale.totalAmount.toLocaleString() : '0' %></td>
                      <td>
                        <% if (sale.items && sale.items.length > 0) { %>
                          <% sale.items.forEach(item => { %>
                            <span class="status <%= item.status %>"><%= item.status %></span><br>
                          <% }); %>
                        <% } else { %>
                          <span class="status N/A">N/A</span>
                        <% } %>
                      </td>
                      <td><%= sale.paymentMethod || 'N/A' %></td>
                    </tr>
                    <% }); %>
                  </tbody>
                </table>

                <div class="pagination" id="pagination">
                  <a href="#" class="pagination-btn <%= currentPage <= 1 ? 'disabled' : '' %>"
                    data-page="<%= currentPage - 1 %>">Previous</a>
                  <span class="page-info">Page <%= currentPage %> of <%= totalPages %></span>
                  <a href="#" class="pagination-btn <%= currentPage >= totalPages ? 'disabled' : '' %>"
                    data-page="<%= currentPage + 1 %>">Next</a>
                </div>

                <button class="back-btn" onclick="window.location.href='/admin/dashboard'">
                  <i class="fas fa-arrow-left"></i> Back to Dashboard
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </main>

  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const tabButtons = document.querySelectorAll(".tab-btn");
      const tabPanes = document.querySelectorAll(".tab-pane");
      const salesReportForm = document.getElementById("sales-report-form");
      const periodSelect = document.getElementById("period-select");
      const customDateFields = document.getElementById("custom-date-fields");
      const downloadPdfBtn = document.getElementById("download-pdf-btn");
      let analyticsInitialized = false;

      let productsChart, categoriesChart, overallSalesChart, salesTimeChart;

      const horizontalBarConfig = {
        type: 'bar',
        options: {
          indexAxis: 'y',
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: false
            },
            tooltip: {
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.x !== null) {
                    label += "+" + new Intl.NumberFormat('en-IN', { 
                      maximumFractionDigits: 0
                    }).format(context.parsed.x);
                  }
                  return label;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            },
            y: {
              grid: {
                display: false
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            }
          }
        }
      };

      const lineChartConfig = {
        type: 'line',
        options: {
          responsive: true,
          maintainAspectRatio: false,
          plugins: {
            legend: {
              display: true,
              position: 'top',
              labels: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            },
            tooltip: {
              mode: 'index',
              intersect: false,
              callbacks: {
                label: function(context) {
                  let label = context.dataset.label || '';
                  if (label) {
                    label += ': ';
                  }
                  if (context.parsed.y !== null) {
                    label += new Intl.NumberFormat('en-IN', { 
                      style: 'currency', 
                      currency: 'INR',
                      maximumFractionDigits: 0
                    }).format(context.parsed.y);
                  }
                  return label;
                }
              }
            }
          },
          scales: {
            x: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)'
              }
            },
            y: {
              grid: {
                color: 'rgba(255, 255, 255, 0.1)'
              },
              ticks: {
                color: 'rgba(255, 255, 255, 0.7)',
                callback: function(value) {
                  return '₹' + value.toLocaleString('en-IN');
                }
              }
            }
          }
        }
      };

      function initializeAnalytics() {
        if (analyticsInitialized) return;
        analyticsInitialized = true;

        const timeFilter = document.getElementById('time-filter');
        const monthContainer = document.getElementById('month-container');
        const weekContainer = document.getElementById('week-container');
        const applyFilterBtn = document.getElementById('apply-filter');

        timeFilter.addEventListener('change', function() {
          if (this.value === 'yearly') {
            monthContainer.style.display = 'none';
            weekContainer.style.display = 'none';
          } else if (this.value === 'monthly') {
            monthContainer.style.display = 'block';
            weekContainer.style.display = 'none';
          } else if (this.value === 'weekly') {
            monthContainer.style.display = 'block';
            weekContainer.style.display = 'block';
          } else if (this.value === 'daily') {
            monthContainer.style.display = 'block';
            weekContainer.style.display = 'block';
          }
        });

        productsChart = new Chart(
          document.getElementById('productsChart'),
          { ...horizontalBarConfig, data: { labels: [], datasets: [{ label: 'Units Sold', data: [] }] } }
        );

        categoriesChart = new Chart(
          document.getElementById('categoriesChart'),
          { ...horizontalBarConfig, data: { labels: [], datasets: [{ label: 'Sales Amount', data: [] }] } }
        );

        overallSalesChart = new Chart(
          document.getElementById('overallSalesChart'),
          { ...lineChartConfig, data: { labels: [], datasets: [{ label: 'Revenue', data: [] }] } }
        );

        salesTimeChart = new Chart(
          document.getElementById('salesTimeChart'),
          { ...lineChartConfig, data: { labels: [], datasets: [{ label: 'Revenue', data: [] }] } }
        );

        fetchAnalyticsData();

        applyFilterBtn.addEventListener('click', function() {
          const timePeriod = timeFilter.value;
          const year = document.getElementById('year-filter').value;
          const month = document.getElementById('month-filter').value;
          const week = document.getElementById('week-filter').value;

          fetchAnalyticsData(timePeriod, year, month, week);

          updateChartTitles(timePeriod, year, month, week);

          showFilterAppliedMessage(timePeriod, year, month, week);
        });
      }

      async function fetchAnalyticsData(timePeriod = 'monthly', year = new Date().getFullYear(), month = new Date().getMonth(), week) {
        const params = new URLSearchParams({ timePeriod });
        // Only include year, month, or week for products and categories, not for sales-time to get full history
        const historicalParams = new URLSearchParams({ timePeriod });
        if (timePeriod === 'yearly') {
          params.append('year', year);
        } else if (timePeriod === 'monthly') {
          params.append('year', year);
          params.append('month', month);
        } else if (timePeriod === 'weekly' || timePeriod === 'daily') {
          params.append('year', year);
          params.append('month', month);
          params.append('week', week);
        }

        try {
          // Fetch products data (filtered by selected period)
          const productsResponse = await fetch(`/admin/analytics/products?${params}`);
          const productsData = await productsResponse.json();
          productsChart.data.labels = productsData.map(p => p.name);
          productsChart.data.datasets[0].data = productsData.map(p => p.unitsSold);
          productsChart.data.datasets[0].backgroundColor = 'rgba(58, 134, 255, 0.8)';
          productsChart.data.datasets[0].borderColor = 'rgba(58, 134, 255, 1)';
          productsChart.update();

          // Fetch categories data (filtered by selected period)
          const categoriesResponse = await fetch(`/admin/analytics/categories?${params}`);
          const categoriesData = await categoriesResponse.json();
          categoriesChart.data.labels = categoriesData.map(c => c.name);
          categoriesChart.data.datasets[0].data = categoriesData.map(c => c.revenue);
          categoriesChart.data.datasets[0].backgroundColor = 'rgba(110, 202, 120, 0.8)';
          categoriesChart.data.datasets[0].borderColor = 'rgba(110, 202, 120, 1)';
          categoriesChart.update();

          // Fetch sales-time data (full history for the selected timePeriod)
          const salesTimeResponse = await fetch(`/admin/analytics/sales-time?${historicalParams}`);
          const salesTimeData = await salesTimeResponse.json();

          let labels = [];
          let data = [];

          if (timePeriod === 'yearly') {
            // Generate labels for all years from the earliest year in data
            const years = salesTimeData.map(d => d._id).sort((a, b) => a - b);
            labels = years.map(year => `Year ${year}`);
            data = years.map(year => {
              const record = salesTimeData.find(d => d._id === year);
              return record ? record.totalRevenue : 0;
            });
          } else if (timePeriod === 'monthly') {
            // Generate labels for all months from the earliest date in data
            const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
            const months = salesTimeData.map(d => ({ year: d.year, month: d._id })).sort((a, b) => a.year - b.year || a.month - b.month);
            labels = months.map(m => `${monthNames[m.month - 1]} ${m.year}`);
            data = months.map(m => {
              const record = salesTimeData.find(d => d._id === m.month && d.year === m.year);
              return record ? record.totalRevenue : 0;
            });
          } else if (timePeriod === 'weekly') {
            // Generate labels for all weeks from the earliest date in data
            const weeks = salesTimeData.map(d => ({ year: d.year, month: d.month, week: d._id })).sort((a, b) => a.year - b.year || a.month - b.month || a.week - b.week);
            labels = weeks.map(w => `Week ${w.week}, ${w.month}/${w.year}`);
            data = weeks.map(w => {
              const record = salesTimeData.find(d => d._id === w.week && d.month === w.month && d.year === w.year);
              return record ? record.totalRevenue : 0;
            });
          } else if (timePeriod === 'daily') {
            // Generate labels for all days from the earliest date in data
            const days = salesTimeData.map(d => ({ year: d.year, month: d.month, day: d._id })).sort((a, b) => a.year - b.year || a.month - b.month || a.day - b.day);
            labels = days.map(d => `${d.day}/${d.month}/${d.year}`);
            data = days.map(d => {
              const record = salesTimeData.find(d => d._id === d.day && d.month === d.month && d.year === d.year);
              return record ? record.totalRevenue : 0;
            });
          }

          // Update Overall Sales Chart
          overallSalesChart.data.labels = labels;
          overallSalesChart.data.datasets[0].data = data;
          overallSalesChart.data.datasets[0].backgroundColor = 'rgba(255, 99, 132, 0.2)';
          overallSalesChart.data.datasets[0].borderColor = 'rgba(255, 99, 132, 1)';
          overallSalesChart.data.datasets[0].tension = 0.4;
          overallSalesChart.data.datasets[0].fill = true;
          overallSalesChart.update();

          // Update Sales Time Chart
          salesTimeChart.data.labels = labels;
          salesTimeChart.data.datasets[0].data = data;
          salesTimeChart.data.datasets[0].backgroundColor = 'rgba(138, 123, 247, 0.2)';
          salesTimeChart.data.datasets[0].borderColor = 'rgba(138, 123, 247, 1)';
          salesTimeChart.data.datasets[0].tension = 0.4;
          salesTimeChart.data.datasets[0].fill = true;
          salesTimeChart.update();
        } catch (error) {
          console.error('Error fetching analytics data:', error);
          Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to load analytics data. Please try again.',
            confirmButtonColor: '#3a86ff'
          });
        }
      }

      function updateChartTitles(timePeriod, year, month, week) {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        let timeLabel = 'Historical Data';

        if (timePeriod === 'yearly') {
          timeLabel = `All Years`;
        } else if (timePeriod === 'monthly') {
          timeLabel = `All Months`;
        } else if (timePeriod === 'weekly') {
          timeLabel = `All Weeks`;
        } else if (timePeriod === 'daily') {
          timeLabel = `All Days`;
        }

        document.querySelector('.chart-title').textContent = `Best Selling Products (Top 10) - ${timeLabel}`;
        document.querySelectorAll('.chart-title')[1].textContent = `Best Selling Categories (Top 10) - ${timeLabel}`;
        document.querySelectorAll('.chart-title')[2].textContent = `Overall Sales Performance - ${timeLabel}`;
        document.querySelectorAll('.chart-title')[3].textContent = `Sales Performance - ${timeLabel}`;
      }

      function showFilterAppliedMessage(timePeriod, year, month, week) {
        const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        let timeLabel = '';

        if (timePeriod === 'yearly') {
          timeLabel = `Year ${year}`;
        } else if (timePeriod === 'monthly') {
          timeLabel = `${monthNames[month]} ${year}`;
        } else if (timePeriod === 'weekly') {
          timeLabel = `Week ${week}, ${monthNames[month]} ${year}`;
        } else if (timePeriod === 'daily') {
          timeLabel = `Week ${week}, ${monthNames[month]} ${year} (Daily View)`;
        }

        const notification = document.createElement('div');
        notification.style.position = 'fixed';
        notification.style.top = '20px';
        notification.style.right = '20px';
        notification.style.padding = '10px 20px';
        notification.style.backgroundColor = 'var(--primary)';
        notification.style.color = 'white';
        notification.style.borderRadius = 'var(--radius)';
        notification.style.boxShadow = '0 2px 10px rgba(0,0,0,0.2)';
        notification.style.zIndex = '1000';
        notification.style.transition = 'opacity 0.5s';
        notification.textContent = `Filter applied: ${timeLabel}`;

        document.body.appendChild(notification);

        setTimeout(() => {
          notification.style.opacity = '0';
          setTimeout(() => {
            document.body.removeChild(notification);
          }, 500);
        }, 3000);
      }

      tabButtons.forEach(button => {
        button.addEventListener("click", function () {
          const tabId = this.getAttribute("data-tab");
          tabButtons.forEach(btn => btn.classList.remove("active"));
          tabPanes.forEach(pane => pane.classList.remove("active"));
          this.classList.add("active");
          document.getElementById(tabId).classList.add("active");

          if (tabId === "analytics") {
            initializeAnalytics();
          } else if (tabId === "reports") {
            fetchSalesReport({
              period: periodSelect.value || "all",
              page: 1
            });
          }
        });
      });

      salesReportForm.addEventListener("submit", function (e) {
        e.preventDefault();
        const formData = new FormData(this);
        const params = {
          period: formData.get("period"),
          startDate: formData.get("startDate"),
          endDate: formData.get("endDate"),
          page: 1
        };
        fetchSalesReport(params);
      });

      downloadPdfBtn.addEventListener("click", function () {
        const formData = new FormData(salesReportForm);
        const params = {
          period: formData.get("period"),
          startDate: formData.get("startDate"),
          endDate: formData.get("endDate"),
          download: "pdf"
        };
        const query = new URLSearchParams(params).toString();
        window.location.href = `/admin/sales-report?${query}`;
      });

      const downloadExcelBtn = document.getElementById("download-excel-btn");

      downloadExcelBtn.addEventListener("click", function () {
        const formData = new FormData(salesReportForm);
        const params = {
          period: formData.get("period"),
          startDate: formData.get("startDate"),
          endDate: formData.get("endDate"),
          download: "excel"
        };
        const query = new URLSearchParams(params).toString();
        window.location.href = `/admin/sales-report?${query}`;
      });

      function updatePaginationListeners() {
        const paginationButtons = document.querySelectorAll(".pagination-btn");
        paginationButtons.forEach(btn => {
          btn.removeEventListener("click", handlePaginationClick);
          btn.addEventListener("click", handlePaginationClick);
        });
      }

      function handlePaginationClick(e) {
        e.preventDefault();
        const page = this.getAttribute("data-page");
        if (page && !this.classList.contains("disabled")) {
          const formData = new FormData(salesReportForm);
          const params = {
            period: formData.get("period"),
            startDate: formData.get("startDate"),
            endDate: formData.get("endDate"),
            page: parseInt(page)
          };
          fetchSalesReport(params);
        }
      }

      updatePaginationListeners();

      periodSelect.addEventListener("change", function () {
        customDateFields.classList.toggle("d-none", this.value !== "custom");
      });

      function fetchSalesReport(params) {
        const query = new URLSearchParams(params).toString();
        fetch(`/admin/sales-report?ajax=true&${query}`, {
            method: "GET",
            headers: {
              "Accept": "application/json"
            }
          })
          .then(response => {
            if (!response.ok) throw new Error("Failed to fetch sales report");
            return response.json();
          })
          .then(data => {
            const summaryCard = document.querySelector("#sales-report-content .summary-card");
            summaryCard.innerHTML = `
              <div class="summary-item">
                <div class="summary-value">${data.totalSales.toLocaleString()}</div>
                <div class="summary-label">Total Revenue</div>
              </div>
              <div class="summary-item">
                <div class="summary-value">${data.totalOrderCount.toLocaleString()}</div>
                <div class="summary-label">Total Orders</div>
              </div>
            `;

            const tableBody = document.getElementById("sales-table-body");
            tableBody.innerHTML = data.sales.map(sale => `
             <tr>
              <td>${sale.orderId}</td>
              <td>${sale.userId ? sale.userId.name : "Unknown"}</td>
              <td>${sale.orderDate ? new Date(sale.orderDate).toLocaleDateString() : "N/A"}</td>
              <td>${sale.items.length}</td>
              <td>₹${sale.totalAmount ? sale.totalAmount.toLocaleString() : "0"}</td>
              <td>₹${sale.totalAmount ? sale.totalAmount.toLocaleString() : "0"}</td>
              <td>
                ${sale.items && sale.items.length > 0
                  ? sale.items.map(item => `<span class="status ${item.status}">${item.status}</span>`).join('<br>')
                  : '<span class="status N/A">N/A</span>'
                }
              </td>
              <td>${sale.paymentMethod || "N/A"}</td>
            </tr>
            `).join("");

            const pagination = document.getElementById("pagination");
            pagination.innerHTML = `
              <a href="#" class="pagination-btn ${data.currentPage <= 1 ? "disabled" : ""}" data-page="${data.currentPage - 1}">Previous</a>
              <span class="page-info">Page ${data.currentPage} of ${data.totalPages}</span>
              <a href="#" class="pagination-btn ${data.currentPage >= data.totalPages ? "disabled" : ""}" data-page="${data.currentPage + 1}">Next</a>
            `;

            updatePaginationListeners();
          })
          .catch(error => {
            console.error("Error fetching sales report:", error);
            Swal.fire({
              icon: 'error',
              title: 'Error',
              text: 'Failed to load sales report. Please try again.',
              confirmButtonColor: '#3a86ff'
            });
          });
      }
    });
  </script>
</body>

</html>