<%- include("../../views/partials/admin/header") %>
<title>Coupon Management</title>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet">
<style>
  :root {
    --primary: #6366f1;
    --primary-hover: #4f46e5;
    --secondary: #64748b;
    --success: #10b981;
    --danger: #ef4444;
    --warning: #f59e0b;
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --card-bg: #1e293b;
    --text-primary: #f8fafc;
    --text-secondary: #cbd5e1;
    --text-muted: #94a3b8;
    --border-color: #334155;
  }
  
  body {
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-primary);
    color: var(--text-primary);
  }
  .container{
    margin-left: 250px;
  }

  .page-header {
    background-color: var(--bg-secondary);
    border-bottom: 1px solid var(--border-color);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  .data-card {
    background-color: var(--card-bg);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
    transition: all 0.3s ease;
  }
  
  .data-card:hover {
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    transform: translateY(-2px);
  }

  .table-header {
    background-color: var(--bg-secondary);
    color: var(--text-secondary);
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    font-size: 0.75rem;
    border-bottom: 1px solid var(--border-color);
  }

  .table-row {
    border-bottom: 1px solid var(--border-color);
    transition: all 0.2s ease;
  }

  .table-row:hover {
    background-color: rgba(255, 255, 255, 0.05);
  }

  .btn {
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    border-radius: 8px;
    padding: 0.5rem 1rem;
  }

  .btn-primary {
    background-color: var(--primary);
    color: white;
  }

  .btn-primary:hover {
    background-color: var(--primary-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(99, 102, 241, 0.4);
  }

  .btn-secondary {
    background-color: transparent;
    border: 1px solid var(--secondary);
    color: var(--text-secondary);
  }

  .btn-secondary:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transform: translateY(-1px);
  }

  .badge {
    padding: 0.25rem 0.75rem;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 0.025em;
    text-transform: uppercase;
  }

  .badge-active {
    background-color: rgba(16, 185, 129, 0.2);
    color: #34d399;
    border: 1px solid rgba(16, 185, 129, 0.3);
  }

  .badge-inactive {
    background-color: rgba(239, 68, 68, 0.2);
    color: #f87171;
    border: 1px solid rgba(239, 68, 68, 0.3);
  }

  .input-field {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--text-primary);
    transition: all 0.3s ease;
  }

  .input-field:focus {
    border-color: var(--primary);
    box-shadow: 0 0 0 3px rgba(99, 102, 241, 0.3);
    outline: none;
  }

  .input-field::placeholder {
    color: var(--text-muted);
  }

  .modal-overlay {
    background-color: rgba(0, 0, 0, 0.7);
    backdrop-filter: blur(4px);
  }

  .modal-container {
    background-color: var(--card-bg);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
  }

  .action-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2rem;
    height: 2rem;
    border-radius: 8px;
    transition: all 0.2s ease;
  }

  .action-icon:hover {
    background-color: rgba(255, 255, 255, 0.1);
    transform: translateY(-2px);
  }

  .edit-icon {
    color: #60a5fa;
  }

  .delete-icon {
    color: #f87171;
  }

  .pagination-item {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border-radius: 8px;
    transition: all 0.2s ease;
    border: 1px solid var(--border-color);
    background-color: var(--card-bg);
    color: var(--text-secondary);
  }

  .pagination-item:hover {
    background-color: rgba(255, 255, 255, 0.1);
  }

  .pagination-item.active {
    background-color: var(--primary);
    color: white;
    border-color: var(--primary-hover);
  }

  .pagination-nav {
    padding: 0.5rem 1rem;
  }

  .fade-in {
    animation: fadeIn 0.3s ease forwards;
  }

  .slide-up {
    animation: slideUp 0.3s ease forwards;
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  @keyframes slideUp {
    from { opacity: 0; transform: translateY(20px); }
    to { opacity: 1; transform: translateY(0); }
  }
</style>

<div class="container px-6 py-8">
    <!-- Header -->
    <div class="flex justify-between items-center mb-8 slide-up">
        <div>
            <h1 class="text-3xl font-bold text-white">Coupon Management</h1>
            <p class="text-text-muted mt-2">Create and manage discount coupons for your customers</p>
        </div>
        <button onclick="openModal()" class="btn btn-primary">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 5a1 1 0 011 1v3h3a1 1 0 110 2h-3v3a1 1 0 11-2 0v-3H6a1 1 0 110-2h3V6a1 1 0 011-1z" clip-rule="evenodd" />
            </svg>
            Add New Coupon
        </button>
    </div>

    <!-- Search, Sort and Filter Controls -->
    <div class="mb-6 flex flex-col md:flex-row gap-4 items-center justify-between">
        <!-- Search Bar -->
        <div class="w-full md:w-1/3">
            <div class="relative">
                <input type="text" id="searchInput" class="input-field w-full pl-10" 
                       placeholder="Search coupons..." value="<%= search || '' %>">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 absolute left-3 top-1/2 transform -translate-y-1/2 text-text-muted" 
                     fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" 
                          d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                </svg>
            </div>
        </div>

        <!-- Sort Dropdown -->
        <div class="flex gap-4">
            <select id="sortBy" class="input-field">
                <option value="createdOn" <%= sortBy === 'createdOn' ? 'selected' : '' %>>Created Date</option>
                <option value="expireOn" <%= sortBy === 'expireOn' ? 'selected' : '' %>>Expiry Date</option>
                <option value="offerPrice" <%= sortBy === 'offerPrice' ? 'selected' : '' %>>Offer Price</option>
                <option value="minimumPrice" <%= sortBy === 'minimumPrice' ? 'selected' : '' %>>Min. Purchase</option>
                <option value="name" <%= sortBy === 'name' ? 'selected' : '' %>>Coupon Code</option>
            </select>
            <select id="sortOrder" class="input-field">
                <option value="asc" <%= sortOrder === 1 ? 'selected' : '' %>>Ascending</option>
                <option value="desc" <%= sortOrder === -1 ? 'selected' : '' %>>Descending</option>
            </select>
        </div>

        <!-- Filter Dropdown -->
        <select id="statusFilter" class="input-field">
            <option value="" <%= !status ? 'selected' : '' %>>All Status</option>
            <option value="active" <%= status === 'active' ? 'selected' : '' %>>Active</option>
            <option value="inactive" <%= status === 'inactive' ? 'selected' : '' %>>Inactive</option>
        </select>
    </div>

    <!-- Main Content -->
    <div class="data-card mb-8 fade-in">
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                    <tr>
                        <th class="table-header px-6 py-4 text-left">Coupon Code</th>
                        <th class="table-header px-6 py-4 text-left">Created On</th>
                        <th class="table-header px-6 py-4 text-left">Expires On</th>
                        <th class="table-header px-6 py-4 text-left">Offer Price</th>
                        <th class="table-header px-6 py-4 text-left">Min. Purchase</th>
                        <th class="table-header px-6 py-4 text-left">Status</th>
                        <th class="table-header px-6 py-4 text-right">Actions</th>
                    </tr>
                </thead>
                <tbody id="couponTableBody">
                    <% if (coupons.length === 0) { %>
                        <tr>
                            <td colspan="7" class="px-6 py-12 text-center text-text-muted">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-12 w-12 mx-auto mb-4 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1" d="M20 12H4M9 5v14m6-14v14" />
                                </svg>
                                No coupons available. Create your first coupon to get started.
                            </td>
                        </tr>
                    <% } else { %>
                        <% coupons.forEach(function(coupon) { %>
                            <tr class="table-row">
                                <td class="px-6 py-4 text-white font-medium"><%= coupon.name %></td>
                                <td class="px-6 py-4 text-text-secondary"><%= new Date(coupon.createdOn).toLocaleDateString("en-GB") %></td>
                                <td class="px-6 py-4 text-text-secondary"><%= new Date(coupon.expireOn).toLocaleDateString("en-GB") %></td>
                                <td class="px-6 py-4">
                                    <span class="text-indigo-400 font-medium"><%= coupon.offerPrice %>₹</span>
                                </td>
                                <td class="px-6 py-4 text-text-secondary"><%= coupon.minimumPrice %>₹</td>
                                <td class="px-6 py-4">
                                    <span class="badge <%= coupon.isListed ? 'badge-active' : 'badge-inactive' %>">
                                        <%= coupon.isListed ? 'Active' : 'Inactive' %>
                                    </span>
                                </td>
                                <td class="px-6 py-4 text-right">
                                    <div class="flex justify-end space-x-2">
                                        <button class="action-icon edit-icon" data-id="<%= coupon.name %>">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z" />
                                            </svg>
                                        </button>
                                        <button onclick="deleteCoupon('<%= coupon.name %>')" class="action-icon delete-icon">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                                                <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        <% }); %>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>

    <!-- Pagination -->
    <div class="flex justify-center items-center space-x-2 mt-8">
        <% if (currentPage > 1) { %>
            <a href="/admin/coupon?page=<%= currentPage - 1 %>&search=<%= encodeURIComponent(search) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder === 1 ? 'asc' : 'desc' %>&status=<%= status %>" 
               class="pagination-item pagination-nav">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clip-rule="evenodd" />
                </svg>
            </a>
        <% } %>

        <% for (let i = 1; i <= totalPages; i++) { %>
            <a href="/admin/coupon?page=<%= i %>&search=<%= encodeURIComponent(search) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder === 1 ? 'asc' : 'desc' %>&status=<%= status %>" 
               class="pagination-item <%= currentPage === i ? 'active' : '' %>">
               <%= i %>
            </a>
        <% } %>

        <% if (currentPage < totalPages) { %>
            <a href="/admin/coupon?page=<%= currentPage + 1 %>&search=<%= encodeURIComponent(search) %>&sortBy=<%= sortBy %>&sortOrder=<%= sortOrder === 1 ? 'asc' : 'desc' %>&status=<%= status %>" 
               class="pagination-item pagination-nav">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd" />
                </svg>
            </a>
        <% } %>
    </div>

    <!-- Create Modal -->
    <div id="couponModal" class="fixed inset-0 modal-overlay flex items-center justify-center z-50 hidden fade-in">
        <div class="modal-container w-full max-w-md p-6 slide-up">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-bold text-white">Add New Coupon</h2>
                <button onclick="closeModal()" class="text-text-muted hover:text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <form id="couponForm" class="space-y-5">
                <div>
                    <label class="block text-text-secondary mb-2 text-sm font-medium">Coupon Code</label>
                    <input type="text" name="couponCreateName" placeholder="Enter coupon code" class="input-field w-full">
                    <p class="mt-1 text-xs text-text-muted">Only letters, numbers, and dashes (3-20 characters)</p>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Start Date</label>
                        <input type="date" name="startCreateDate" class="input-field w-full">
                    </div>
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Expiry Date</label>
                        <input type="date" name="expiryCreateDate" class="input-field w-full">
                    </div>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Offer Price (₹)</label>
                        <input type="number" name="offerCreatePrice" placeholder="0.00" class="input-field w-full">
                    </div>
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Minimum Purchase (₹)</label>
                        <input type="number" name="minimumCreatePrice" placeholder="0.00" class="input-field w-full">
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-8">
                    <button type="button" onclick="closeModal()" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        Create Coupon
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Edit Modal -->
    <div id="couponEditModal" class="fixed inset-0 modal-overlay flex items-center justify-center z-50 hidden fade-in">
        <div class="modal-container w-full max-w-md p-6 slide-up">
            <div class="flex justify-between items-center mb-6">
                <h2 class="text-xl font-bold text-white">Edit Coupon</h2>
                <button onclick="closeEditModal()" class="text-text-muted hover:text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
                    </svg>
                </button>
            </div>
            <form id="couponEditForm" class="space-y-5">
                <div>
                    <label class="block text-text-secondary mb-2 text-sm font-medium">Coupon Code</label>
                    <input type="text" name="couponName" class="input-field w-full bg-opacity-50 cursor-not-allowed" disabled>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Start Date</label>
                        <input type="date" name="startDate" class="input-field w-full">
                    </div>
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Expiry Date</label>
                        <input type="date" name="expiryDate" class="input-field w-full">
                    </div>
                </div>
                
                <div class="grid grid-cols-2 gap-4">
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Offer Price (₹)</label>
                        <input type="number" name="offerPrice" placeholder="0.00" class="input-field w-full">
                    </div>
                    <div>
                        <label class="block text-text-secondary mb-2 text-sm font-medium">Minimum Purchase (₹)</label>
                        <input type="number" name="minimumPrice" placeholder="0.00" class="input-field w-full">
                    </div>
                </div>
                
                <div class="flex justify-end space-x-3 mt-8">
                    <button type="button" onclick="closeEditModal()" class="btn btn-secondary">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        Save Changes
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
document.addEventListener("DOMContentLoaded", function () {
    const today = new Date().toISOString().split("T")[0];
    const startCreateDateInput = document.querySelector('input[name="startCreateDate"]');
    if (startCreateDateInput) {
        startCreateDateInput.value = today;
    }
    
    // Search, Sort, Filter functionality
    const searchInput = document.getElementById('searchInput');
    const sortBySelect = document.getElementById('sortBy');
    const sortOrderSelect = document.getElementById('sortOrder');
    const statusFilter = document.getElementById('statusFilter');

    // Debounce function
    function debounce(func, wait) {
        let timeout;
        return function executedFunction(...args) {
            const later = () => {
                clearTimeout(timeout);
                func(...args);
            };
            clearTimeout(timeout);
            timeout = setTimeout(later, wait);
        };
    }

    // Update URL and reload
    function updateTable() {
        const params = new URLSearchParams({
            search: searchInput.value,
            sortBy: sortBySelect.value,
            sortOrder: sortOrderSelect.value,
            status: statusFilter.value,
            page: 1
        });
        window.location.href = `/admin/coupon?${params.toString()}`;
    }

    const debouncedUpdate = debounce(updateTable, 300);
    searchInput.addEventListener('input', debouncedUpdate);
    sortBySelect.addEventListener('change', updateTable);
    sortOrderSelect.addEventListener('change', updateTable);
    statusFilter.addEventListener('change', updateTable);

    // Client-side filtering
    function filterTableRows() {
        const searchText = searchInput.value.toLowerCase();
        const status = statusFilter.value;
        
        document.querySelectorAll('.table-row').forEach(row => {
            const couponName = row.querySelector('td:first-child').textContent.toLowerCase();
            const statusText = row.querySelector('.badge').textContent.toLowerCase();
            
            const matchesSearch = couponName.includes(searchText);
            const matchesStatus = !status || (status === 'active' && statusText === 'active') || 
                                (status === 'inactive' && statusText === 'inactive');
            
            row.style.display = matchesSearch && matchesStatus ? '' : 'none';
        });
    }

    filterTableRows();
    searchInput.addEventListener('input', filterTableRows);
    statusFilter.addEventListener('change', filterTableRows);

    // Edit Coupon Form Submission
    document.getElementById("couponEditForm")?.addEventListener("submit", async function (event) {
        event.preventDefault();
        const formData = {
            couponName: document.querySelector("[name='couponName']").value,
            startDate: document.querySelector("[name='startDate']").value,
            expiryDate: document.querySelector("[name='expiryDate']").value,
            offerPrice: document.querySelector("[name='offerPrice']").value,
            minimumPrice: document.querySelector("[name='minimumPrice']").value
        };
        
        if (!formData.couponName) {
            Swal.fire({ icon: "error", title: "⚠️ Invalid Coupon Name", text: "Coupon name cannot be empty.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        const couponRegex = /^[a-zA-Z0-9-]{3,20}$/;
        if (!couponRegex.test(formData.couponName)) {
            Swal.fire({ icon: "error", title: "⚠️ Invalid Coupon Format", text: "Coupon name should be 3-20 characters long and contain only letters, numbers, and dashes.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        if (!formData.startDate || !formData.expiryDate) {
            Swal.fire({ icon: "warning", title: "⚠️ Missing Dates", text: "Please select both the Start Date and Expiry Date.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        const start = new Date(formData.startDate);
        const expiry = new Date(formData.expiryDate);
        if (start >= expiry) {
            Swal.fire({ icon: "error", title: "❌ Invalid Date Selection", html: "<b>Start Date</b> must be before the <b>Expiry Date</b>.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        const offerPrice = Number(formData.offerPrice);
        const minimumPrice = Number(formData.minimumPrice);
        if (offerPrice <= 0) {
            Swal.fire({ icon: "error", title: "💰 Invalid Offer Price", text: "Offer price must be a positive number.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        if (minimumPrice <= 0) {
            Swal.fire({ icon: "error", title: "💲 Invalid Minimum Price", text: "Minimum price must be a positive number.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        if (minimumPrice < offerPrice) {
            Swal.fire({ icon: "error", title: "⚖️ Pricing Error", html: "<b>Minimum Price</b> must be greater than or equal to the <b>Offer Price</b>.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        try {
            const response = await fetch("/admin/editCoupon", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });
            const result = await response.json();
            if (result.success) {
                Swal.fire({ title: "Success", text: result.message, icon: "success", confirmButtonText: "OK", background: "#1e293b", color: "#f8fafc" })
                    .then(() => { closeEditModal(); location.reload(); });
            } else {
                Swal.fire({ title: "Error!", text: result.message || "Something went wrong", icon: "error", confirmButtonText: "Try Again", background: "#1e293b", color: "#f8fafc" });
            }
        } catch (error) {
            console.error("Error updating coupon:", error);
            Swal.fire({ title: "Error!", text: "Something went wrong", icon: "error", confirmButtonText: "Try Again", background: "#1e293b", color: "#f8fafc" });
        }
    });

    // Delete Coupon
    window.deleteCoupon = async function(couponName) {
        Swal.fire({
            title: "Are you sure?",
            text: `You are about to delete the coupon: ${couponName}`,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#ef4444",
            cancelButtonColor: "#6366f1",
            confirmButtonText: "Yes, delete it!",
            background: "#1e293b",
            color: "#f8fafc"
        }).then(async (result) => {
            if (result.isConfirmed) {
                try {
                    const response = await fetch('/admin/deleteCoupon', {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ couponName })
                    });
                    const result = await response.json();
                    if (result.success) {
                        Swal.fire({ title: "Success", text: result.message, icon: "success", confirmButtonText: "OK", background: "#1e293b", color: "#f8fafc" })
                            .then(() => { location.reload(); });
                    } else {
                        Swal.fire({ title: "Error!", text: result.message || "Something went wrong", icon: "error", confirmButtonText: "Try Again", background: "#1e293b", color: "#f8fafc" });
                    }
                } catch (error) {
                    console.error("Fetch error:", error);
                    Swal.fire({ title: "Error!", text: error.message || "Failed to delete the coupon.", icon: "error", confirmButtonText: "OK", background: "#1e293b", color: "#f8fafc" });
                }
            }
        });
    };

    // Create Coupon Form Submission
    document.getElementById("couponForm")?.addEventListener("submit", async function(event) {
        event.preventDefault();
        const formData = {
            couponName: document.querySelector('input[name="couponCreateName"]').value,
            startDate: document.querySelector('input[name="startCreateDate"]').value,
            expiryDate: document.querySelector('input[name="expiryCreateDate"]').value,
            offerPrice: document.querySelector('input[name="offerCreatePrice"]').value,
            minimumPrice: document.querySelector('input[name="minimumCreatePrice"]').value
        };
        
        if (!formData.couponName) {
            Swal.fire({ icon: "error", title: "⚠️ Invalid Coupon Name", text: "Coupon name cannot be empty.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        const couponRegex = /^[a-zA-Z0-9-]{3,20}$/;
        if (!couponRegex.test(formData.couponName)) {
            Swal.fire({ icon: "error", title: "⚠️ Invalid Coupon Format", text: "Coupon name should be 3-20 characters long and contain only letters, numbers, and dashes.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        if (!formData.startDate || !formData.expiryDate) {
            Swal.fire({ icon: "warning", title: "⚠️ Missing Dates", text: "Please select both the Start Date and Expiry Date.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        const start = new Date(formData.startDate);
        const expiry = new Date(formData.expiryDate);
        if (start >= expiry) {
            Swal.fire({ icon: "error", title: "❌ Invalid Date Selection", html: "<b>Start Date</b> must be before the <b>Expiry Date</b>.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        const offerPrice = Number(formData.offerPrice);
        const minimumPrice = Number(formData.minimumPrice);
        if (offerPrice <= 0) {
            Swal.fire({ icon: "error", title: "💰 Invalid Offer Price", text: "Offer price must be a positive number.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        if (minimumPrice <= 0) {
            Swal.fire({ icon: "error", title: "💲 Invalid Minimum Price", text: "Minimum price must be a positive number.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        if (minimumPrice < offerPrice) {
            Swal.fire({ icon: "error", title: "⚖️ Pricing Error", html: "<b>Minimum Price</b> must be greater than or equal to the <b>Offer Price</b>.", timer: 2500, showConfirmButton: false, background: "#1e293b", color: "#f8fafc" });
            return;
        }
        
        try {
            const response = await fetch("/admin/addCoupon", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });
            const result = await response.json();
            if (result.success) {
                Swal.fire({ title: "Success", text: result.message || "Coupon created successfully", icon: "success", confirmButtonText: "OK", background: "#1e293b", color: "#f8fafc" })
                    .then(() => { closeModal(); location.reload(); });
            } else {
                Swal.fire({ title: "Error!", text: result.message || "Something went wrong", icon: "error", confirmButtonText: "Try Again", background: "#1e293b", color: "#f8fafc" });
            }
        } catch (error) {
            console.error("Error creating coupon:", error);
            Swal.fire({ title: "Error!", text: "Something went wrong", icon: "error", confirmButtonText: "Try Again", background: "#1e293b", color: "#f8fafc" });
        }
    });
    
    document.querySelectorAll('.edit-icon').forEach(button => {
        button.addEventListener('click', function() {
            const couponName = this.getAttribute('data-id');
            openEditModal(couponName);
        });
    });
});


function openModal() {
    document.getElementById("couponModal").classList.remove("hidden");
    document.body.style.overflow = "hidden";
}

function closeModal() {
    document.getElementById("couponModal").classList.add("hidden");
    document.body.style.overflow = "auto";
    document.getElementById("couponForm").reset();
}

function openEditModal(couponName) {
    fetch(`/admin/coupons/${encodeURIComponent(couponName)}`)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            return response.json();
        })
        .then(data => {
            if (data.success) {
                const couponData = data.coupon || data.response;
                const startDate = new Date(couponData.createdOn).toISOString().split('T')[0];
                const expiryDate = new Date(couponData.expireOn).toISOString().split('T')[0];
                
                document.querySelector("[name='couponName']").value = couponData.name;
                document.querySelector("[name='startDate']").value = startDate;
                document.querySelector("[name='expiryDate']").value = expiryDate;
                document.querySelector("[name='offerPrice']").value = couponData.offerPrice;
                document.querySelector("[name='minimumPrice']").value = couponData.minimumPrice;
                
                document.getElementById("couponEditModal").classList.remove("hidden");
                document.body.style.overflow = "hidden";
            } else {
                Swal.fire({ title: "Error!", text: data.message || "Failed to load coupon details", icon: "error", confirmButtonText: "OK", background: "#1e293b", color: "#f8fafc" });
            }
        })
        .catch(error => {
            console.error("Error fetching coupon:", error);
            Swal.fire({ title: "Error!", text: "Failed to load coupon details", icon: "error", confirmButtonText: "OK", background: "#1e293b", color: "#f8fafc" });
        });
}

function closeEditModal() {
    document.getElementById("couponEditModal").classList.add("hidden");
    document.body.style.overflow = "auto";
    document.getElementById("couponEditForm").reset();
}


document.querySelectorAll('.table-row').forEach(row => {
    row.addEventListener('click', function(e) {
        if (!e.target.closest('.action-icon')) {
            this.classList.add('bg-opacity-10', 'bg-white');
            setTimeout(() => {
                this.classList.remove('bg-opacity-10', 'bg-white');
            }, 300);
        }
    });
});
</script>

<%- include("../../views/partials/admin/footer") %>