<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin - Order Details</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --primary-light: #eef2ff;
            --primary-dark: #3a56d4;
            --secondary-color: #f8fafc;
            --text-color: #1e293b;
            --light-text: #64748b;
            --border-color: #e2e8f0;
            --success-color: #10b981;
            --warning-color: #f59e0b;
            --danger-color: #ef4444;
            --card-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
            --transition: all 0.3s ease;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', system-ui, -apple-system, BlinkMacSystemFont, sans-serif;
            background-color: var(--secondary-color);
            line-height: 1.6;
            color: var(--text-color);
            font-size: 16px;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 24px;
        }

        .order-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 24px;
            background-color: white;
            padding: 20px 24px;
            border-radius: 12px;
            box-shadow: var(--card-shadow);
            border-left: 4px solid var(--primary-color);
        }

        .order-header h1 {
            color: var(--primary-color);
            font-size: 1.5rem;
            font-weight: 600;
        }

        .order-details-container {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 24px;
            margin-bottom: 24px;
        }

        .details-card {
            background-color: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: var(--card-shadow);
            transition: var(--transition);
        }

        .details-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.08);
        }

        .details-card h2 {
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 12px;
            margin-bottom: 16px;
            color: var(--text-color);
            font-size: 1.25rem;
            font-weight: 600;
        }

        .details-grid {
            display: grid;
            grid-template-columns: auto 1fr;
            gap: 12px;
        }

        .details-grid p {
            margin: 6px 0;
            color: var(--light-text);
            display: contents;
            font-size: 0.95rem;
        }

        .details-grid strong {
            color: var(--text-color);
            min-width: 150px;
            display: inline-block;
            font-weight: 500;
        }

        .products-section {
            background-color: white;
            border-radius: 12px;
            padding: 24px;
            box-shadow: var(--card-shadow);
            margin-bottom: 24px;
        }

        .products-section h2 {
            border-bottom: 2px solid var(--primary-color);
            padding-bottom: 12px;
            margin-bottom: 16px;
            color: var(--text-color);
            font-size: 1.25rem;
            font-weight: 600;
        }

        .product-item {
            display: grid;
            grid-template-columns: 100px 1fr auto;
            gap: 20px;
            align-items: center;
            border-bottom: 1px solid var(--border-color);
            padding: 20px 0;
            transition: var(--transition);
        }

        .product-item:hover {
            background-color: var(--primary-light);
            padding-left: 16px;
            padding-right: 16px;
            margin: 0 -16px;
            border-radius: 8px;
        }

        .product-item:last-child {
            border-bottom: none;
        }

        .product-image {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 10px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        }

        .product-details {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
        }

        .product-details p {
            margin: 4px 0;
            color: var(--light-text);
            font-size: 0.95rem;
        }

        .product-details strong {
            color: var(--text-color);
            font-weight: 500;
        }

        .status-select,
        .product-status-select {
            padding: 10px 14px;
            border: 1px solid var(--border-color);
            border-radius: 8px;
            background-color: white;
            transition: var(--transition);
            font-size: 0.95rem;
            color: var(--text-color);
            cursor: pointer;
            appearance: none;
            background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' viewBox='0 0 24 24' fill='none' stroke='%234361ee' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpath d='M6 9l6 6 6-6'/%3E%3C/svg%3E");
            background-repeat: no-repeat;
            background-position: right 12px center;
            padding-right: 36px;
            width: 100%;
        }

        .status-select:hover,
        .product-status-select:hover {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px var(--primary-light);
        }

        .status-select:focus,
        .product-status-select:focus {
            outline: none;
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px var(--primary-light);
        }

        .status-select:disabled,
        .product-status-select:disabled {
            background-color: #f8fafc;
            cursor: not-allowed;
            opacity: 0.7;
            color: var(--light-text);
        }

        .product-status-container {
            display: flex;
            flex-direction: column;
            gap: 12px;
            min-width: 160px;
        }

        .back-button,
        .manage-return-button {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            background-color: var(--primary-color);
            color: white;
            padding: 12px 20px;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 500;
            transition: var(--transition);
            border: none;
            cursor: pointer;
        }

        .back-button::before {
            content: "‚Üê";
            margin-right: 6px;
        }

        .back-button:hover,
        .manage-return-button:hover {
            background-color: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.3);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.6);
            z-index: 1000;
            justify-content: center;
            align-items: center;
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background-color: white;
            padding: 30px;
            border-radius: 12px;
            width: 90%;
            max-width: 500px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
            animation: modalFadeIn 0.3s ease;
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            border-bottom: 1px solid var(--border-color);
            padding-bottom: 16px;
        }

        .modal-header h3 {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--text-color);
        }

        .modal-close {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: var(--light-text);
            transition: var(--transition);
        }

        .modal-close:hover {
            color: var(--danger-color);
        }

        .modal-body {
            margin-bottom: 24px;
            color: var(--light-text);
            font-size: 0.95rem;
            line-height: 1.7;
        }

        .modal-actions {
            display: flex;
            justify-content: flex-end;
            gap: 12px;
        }

        .btn {
            padding: 10px 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            font-size: 0.95rem;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .btn-primary {
            background-color: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background-color: var(--primary-dark);
            box-shadow: 0 4px 8px rgba(67, 97, 238, 0.3);
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover {
            background-color: #0ca678;
            box-shadow: 0 4px 8px rgba(16, 185, 129, 0.3);
        }

        .btn-danger {
            background-color: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background-color: #e11d48;
            box-shadow: 0 4px 8px rgba(239, 68, 68, 0.3);
        }

        .btn-secondary {
            background-color: #f1f5f9;
            color: var(--text-color);
        }

        .btn-secondary:hover {
            background-color: #e2e8f0;
        }

        .toast {
            position: fixed;
            bottom: 24px;
            right: 24px;
            background-color: white;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.12);
            padding: 18px;
            border-radius: 8px;
            max-width: 350px;
            z-index: 1001;
            transform: translateY(100px);
            opacity: 0;
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.27, 1.55);
        }

        .toast.show {
            transform: translateY(0);
            opacity: 1;
        }

        .toast-success {
            border-left: 4px solid var(--success-color);
        }

        .toast-error {
            border-left: 4px solid var(--danger-color);
        }

        .toast-warning {
            border-left: 4px solid var(--warning-color);
        }

        .toast-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .toast-header strong {
            font-weight: 600;
            color: var(--text-color);
        }

        #toast-message {
            color: var(--light-text);
            font-size: 0.95rem;
        }

        .confirmation-modal .modal-body {
            text-align: center;
            padding: 16px 0;
        }

        .status-badge {
            display: inline-block;
            padding: 5px 10px;
            border-radius: 6px;
            font-size: 0.85rem;
            font-weight: 500;
        }

        .status-pending {
            background-color: #FEF3C7;
            color: #92400E;
        }

        .status-processing {
            background-color: #DBEAFE;
            color: #1E40AF;
        }

        .status-shipped {
            background-color: #E0E7FF;
            color: #3730A3;
        }

        .status-delivered {
            background-color: #D1FAE5;
            color: #065F46;
        }

        .status-cancelled {
            background-color: #FEE2E2;
            color: #B91C1C;
        }

        .status-returned {
            background-color: #FED7AA;
            color: #9A3412;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .order-details-container {
                grid-template-columns: 1fr;
            }

            .product-item {
                grid-template-columns: 80px 1fr;
                gap: 16px;
            }

            .product-status-container {
                grid-column: span 2;
                margin-top: 12px;
            }

            .product-details {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 576px) {
            .container {
                padding: 16px;
            }

            .order-header h1 {
                font-size: 1.25rem;
            }

            .details-grid {
                grid-template-columns: 1fr;
            }

            .details-grid strong {
                margin-bottom: -8px;
            }
        }
    </style>

</head>

<body>
    <div class="container">
        <% if (order.length === 0) { %>
        <p>No orders found.</p>
        <% } else { 
            const firstOrder = order[0]; 
        %>
        <div class="order-header">
            <h1>Order Details for OrderMainId: <%= firstOrder.orderMainId %></h1>
        </div>

        <div class="order-details-container">
            <!-- Order Overview Section -->
            <div class="details-card">
                <h2>Order Overview</h2>
                <div class="details-grid">
                    <p><strong>Order ID:</strong> <%= firstOrder.orderId %></p>
                    <p><strong>Total Amount:</strong>
                        ‚Çπ<%= firstOrder.totalAmount.toLocaleString('en-IN', { minimumFractionDigits: 2 }) %></p>
                    <p><strong>Order Date:</strong>
                        <%= firstOrder.orderDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' }) %>
                    </p>
                    <p><strong>Payment Method:</strong> <%= firstOrder.paymentMethod %></p>
                    <p><strong>Payment Status:</strong> <%= firstOrder.paymentStatus %></p>
                   
                </div>
            </div>

            <!-- Customer & Shipping Details Section -->
            <div class="details-card">
                <h2>Customer & Shipping Details</h2>
                <div class="details-grid">
                    <p><strong>Customer Name:</strong> <%= firstOrder.userId ? firstOrder.userId.name : 'Unknown' %></p>
                    <p><strong>Customer Email:</strong> <%= firstOrder.userId ? firstOrder.userId.email : 'N/A' %></p>
                    <p><strong>Name:</strong> <%= firstOrder.shippingAddress.name %></p>
                    <p><strong>Phone:</strong> <%= firstOrder.shippingAddress.phone || 'N/A' %></p>
                    <p><strong>Address:</strong>
                        <%= firstOrder.shippingAddress.street %><%= firstOrder.shippingAddress.landmark ? ', ' + firstOrder.shippingAddress.landmark : '' %>
                    </p>
                    <p><strong>Location:</strong> <%= firstOrder.shippingAddress.city %>,
                        <%= firstOrder.shippingAddress.state %> - <%= firstOrder.shippingAddress.pincode %></p>
                    <p><strong>Country:</strong> <%= firstOrder.shippingAddress.country %></p>
                </div>
            </div>
        </div>

        <!-- Individual Product Details Section -->
        <div class="products-section">
            <h2>Order Items</h2>
            <% order.forEach((singleOrder, orderIndex) => {
                    singleOrder.items.forEach((item, itemIndex) => { %>
            <div class="product-item" data-order-id="<%= singleOrder._id %>" data-item-index="<%= itemIndex %>">
                <div class="product-image-container">
                    <% if (item.productImage) { %>
                    <img src="/<%= item.productImage %>" alt="<%= item.productName %>" class="product-image">
                    <% } else { %>
                    No Image
                    <% } %>
                </div>
                <div class="product-details">
                    <p><strong>Product Name:</strong> <%= item.productName || 'N/A' %></p>
                    <p><strong>Size:</strong> <%= item.size || 'N/A' %></p>
                    <p><strong>Quantity:</strong> <%= item.quantity || 'N/A' %></p>
                    <p><strong>Original Price:</strong>
                        <%= item.price !== undefined && item.price !== null ? '‚Çπ' + item.price.toLocaleString('en-IN', { minimumFractionDigits: 2 }) : 'N/A' %>
                    </p>
                    <p><strong>Discount:</strong>
                        <% if (item.price !== undefined && item.price !== null && item.finalPrice !== undefined && item.finalPrice !== null && item.price > 0) { %>
                            <%= (((item.price - item.finalPrice) / item.price) * 100).toFixed(2) + '%' %>
                        <% } else { %>
                            0%
                        <% } %>
                    </p>
                    <p><strong>Final Price:</strong>
                        <%= item.finalPrice !== undefined && item.finalPrice !== null ? '‚Çπ' + item.finalPrice.toLocaleString('en-IN', { minimumFractionDigits: 2 }) : 'N/A' %>
                    </p>
                    <% if (item.returnRequested) { %>
                    <p><strong>Return Status:</strong> <span class="status-badge status-returned">Return Requested</span></p>
                    <% } %>
                </div>

                <%if (item.status !== 'Return Request'){%>
                <div class="product-status-container">
                    <select class="product-status-select" data-order-id="<%= singleOrder._id %>"
                        data-item-index="<%= itemIndex %>" data-product-id="<%= item.productId %>"
                        <%= item.status === 'Delivered' || item.status === 'Cancelled' ? 'disabled' : '' %>>
                        <option value="Pending" <%= item.status === 'Pending' ? 'selected' : '' %>>Pending</option>
                        <option value="Processing" <%= item.status === 'Processing' ? 'selected' : '' %>>Processing
                        </option>
                        <option value="Shipped" <%= item.status === 'Shipped' ? 'selected' : '' %>>Shipped</option>
                        <option value="Delivered" <%= item.status === 'Delivered' ? 'selected' : '' %>>Delivered
                        </option>
                        <option value="Cancelled" <%= item.status === 'Cancelled' ? 'selected' : '' %>>Cancelled
                        </option>
                        <%}%>
                                    <% if (item.status === 'Returned') { %>
                        <option value="Returned" selected>Returned</option>
                        <% } %>
                    </select>
                    <% if (item.status === 'Return Request') { %>
                        <button class="manage-return-button"
                        onclick='handleReturnRequest("<%= singleOrder._id %>", "<%= itemIndex %>", "<%= encodeURIComponent(item.returnReason || `No reason provided`) %>")'>
                        Manage Return
                      </button>
                    <% } %>
                </div>
            </div>
            <% 
                    });
                }) %>
        </div>

        <a href="/admin/order-list" class="back-button">Back to Orders</a>
        <% } %>
    </div>

    <!-- Status Change Confirmation Modal -->
    <div id="status-confirmation-modal" class="modal confirmation-modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Confirm Status Change</h3>
                <button class="modal-close" onclick="closeModal('status-confirmation-modal')">√ó</button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to change the status to <span id="new-status-value"></span>?</p>
                <p>This action cannot be undone.</p>
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal('status-confirmation-modal')">Cancel</button>
                <button class="btn btn-primary" id="confirm-status-change">Confirm</button>
            </div>
        </div>
    </div>

    <!-- Return Request Modal -->
    <div id="return-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3>Return Request Management</h3>
                <button class="modal-close" onclick="closeModal('return-modal')">√ó</button>
            </div>
            <div class="modal-body">
                <p><strong>Return Reason:</strong> <span id="return-reason">No reason provided</span></p>
                <p>Customer has requested a return for this product. How would you like to proceed?</p>
            </div>
            <div class="modal-actions">
                <button class="btn btn-secondary" onclick="closeModal('return-modal')">Cancel</button>
                <button class="btn btn-danger" id="reject-return">Reject Return</button>
                <button class="btn btn-success" id="approve-return">Approve Return</button>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div id="toast" class="toast">
        <div class="toast-header">
            <strong id="toast-title">Notification</strong>
            <button onclick="hideToast()" class="modal-close">√ó</button>
        </div>
        <div id="toast-message">This is a notification message</div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            initStatusSelectListeners();
            checkAndDisableStatusSelects();
        });

        function initStatusSelectListeners() {

            const productStatusSelects = document.querySelectorAll('.product-status-select');
            productStatusSelects.forEach(select => {
                select.addEventListener('change', function (e) {
                    e.preventDefault();
                    showStatusConfirmationModal(this);
                });
            });


            const overallStatusSelect = document.getElementById('overall-status');
            if (overallStatusSelect) {
                overallStatusSelect.addEventListener('change', function (e) {
                    e.preventDefault();

                    const selectedValue = this.value;
                    const previousValue = this.getAttribute('data-previous-value') || this.options[this
                        .selectedIndex].value;
                    this.value = previousValue;

                    document.getElementById('new-status-value').textContent = selectedValue;
                    openModal('status-confirmation-modal');

                    document.getElementById('confirm-status-change').onclick = function () {
                        updateOverallOrderStatus(overallStatusSelect.getAttribute('data-order-id'),
                            selectedValue);
                        closeModal('status-confirmation-modal');
                    };
                });

                overallStatusSelect.setAttribute('data-previous-value', overallStatusSelect.value);
            }
        }

        function showStatusConfirmationModal(selectElement) {
            const selectedValue = selectElement.value;
            const previousValue = selectElement.getAttribute('data-previous-value') || selectElement.options[
                selectElement.selectedIndex].value;
            selectElement.value = previousValue;

            document.getElementById('new-status-value').textContent = selectedValue;
            openModal('status-confirmation-modal');

            document.getElementById('confirm-status-change').onclick = function () {
                updateProductItemStatus(
                    selectElement.getAttribute('data-order-id'),
                    selectElement.getAttribute('data-product-id'),
                    selectElement.getAttribute('data-item-index'),
                    selectedValue
                );
                closeModal('status-confirmation-modal');
            };
        }

        function checkAndDisableStatusSelects() {
            const productStatusSelects = document.querySelectorAll('.product-status-select');

            productStatusSelects.forEach(select => {
                const currentStatus = select.value;

                select.setAttribute('data-previous-value', currentStatus);

                if (currentStatus === 'Delivered' || currentStatus === 'Cancelled' || currentStatus ===
                    'Returned') {
                    select.disabled = true;
                }
            });
        }

        function updateProductItemStatus(orderId, productId, itemIndex, status) {
            fetch(`/admin/orders/${orderId}/${productId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        status: status,
                        itemIndex: itemIndex
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        
                        const selectElement = document.querySelector(
                            `.product-status-select[data-order-id="${orderId}"][data-item-index="${itemIndex}"]`
                            );
                        selectElement.value = status;
                        selectElement.setAttribute('data-previous-value', status);

                        
                        if (status === 'Delivered' || status === 'Cancelled') {
                            selectElement.disabled = true;
                        }

                        showToast('Success', data.message, 'success');
                    } else {
                        showToast('Error', data.message || 'Failed to update status', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'An error occurred while updating the status', 'error');
                });
        }

        function updateOverallOrderStatus(orderId, status) {
            fetch(`/admin/orders/${orderId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        status: status
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                       
                        const selectElement = document.getElementById('overall-status');
                        selectElement.value = status;
                        selectElement.setAttribute('data-previous-value', status);

                        showToast('Success', data.message, 'success');
                    } else {
                        showToast('Error', data.message || 'Failed to update status', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'An error occurred while updating the status', 'error');
                });
        }

        function handleReturnRequest(orderId, itemIndex, returnReason) {
            openModal('return-modal');

          
            document.getElementById('return-reason').textContent = returnReason || 'No reason provided';

          
            document.getElementById('approve-return').onclick = function () {
                processReturn(orderId, itemIndex, 'approve');
                closeModal('return-modal');
            };

          
            document.getElementById('reject-return').onclick = function () {
                processReturn(orderId, itemIndex, 'reject');
                closeModal('return-modal');
            };
        }

        function processReturn(orderId, itemIndex, action) {
            fetch(`/admin/orders/${orderId}/return`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        action: action,
                        itemIndex: itemIndex
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Success', data.message, 'success');

                      
                        if (action === 'approve') {
                            setTimeout(() => {
                                window.location.reload();
                            }, 2000);
                        } else {
                       
                            const productContainer = document.querySelector(
                                `.product-item[data-order-id="${orderId}"][data-item-index="${itemIndex}"]`);
                            const returnBadge = productContainer.querySelector('.status-badge.status-returned');
                            const returnButton = productContainer.querySelector('.manage-return-button');

                            if (returnBadge) returnBadge.remove();
                            if (returnButton) returnButton.remove();
                        }
                    } else {
                        showToast('Error', data.message || 'Failed to process return request', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('Error', 'An error occurred while processing the return request', 'error');
                });
        }

       
        function openModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'flex';
        }

        function closeModal(modalId) {
            const modal = document.getElementById(modalId);
            modal.style.display = 'none';
        }

        
        function showToast(title, message, type = 'success') {
            const toast = document.getElementById('toast');
            const toastTitle = document.getElementById('toast-title');
            const toastMessage = document.getElementById('toast-message');

            
            toast.classList.remove('toast-success', 'toast-error', 'toast-warning');

          
            toast.classList.add(`toast-${type}`);

           
            toastTitle.textContent = title;
            toastMessage.textContent = message;

           
            toast.classList.add('show');

          
            setTimeout(hideToast, 5000);
        }

        function hideToast() {
            const toast = document.getElementById('toast');
            toast.classList.remove('show');
        }

       
        window.onclick = function (event) {
            const modals = document.getElementsByClassName('modal');
            for (let i = 0; i < modals.length; i++) {
                if (event.target === modals[i]) {
                    closeModal(modals[i].id);
                }
            }
        }
    </script>
</body>

</html>