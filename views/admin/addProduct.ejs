<%- include("../../views/partials/admin/header") %>
<head>

        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css">
        <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
     
     
   <link rel="stylesheet" href="/css/add-products.css">

</head>
<section class="content-wrapper">
    <header class="page-header">
        <h2 class="page-title">Add New Product</h2>
    </header>

    <div class="form-container">
        <form method="POST" action="/admin/addProducts" enctype="multipart/form-data" onsubmit="return validateForm()">
            <div class="form-section">
                <h3 class="form-section-title">Basic Information</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label for="product_name" class="form-label">Product Name</label>
                        <input type="text" placeholder="Enter product name" name="productName" class="form-control" id="product_name">
                        <div id="productName-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Description</label>
                        <textarea placeholder="Product description" id="descriptionid" name="description" class="form-control"></textarea>
                        <div id="description-error" class="error-message"></div>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3 class="form-section-title">Pricing & Inventory</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Regular Price</label>
                        <input placeholder="$" name="regularPrice" type="text" class="form-control">
                        <div id="regularPrice-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Sale Price</label>
                        <input placeholder="$" name="salePrice" type="text" class="form-control">
                        <div id="salePrice-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <div class="size-quantity-wrapper">
                            <label class="form-label">Size & Quantity</label>
                            <div class="size-quantity-table">
                                <div class="size-row">
                                    <span class="size-label">S</span>
                                    <input placeholder="Qty" name="quantity-s" type="number" min="0" class="form-control quantity-input">
                                </div>
                                <div class="size-row">
                                    <span class="size-label">M</span>
                                    <input placeholder="Qty" name="quantity-m" type="number" min="0" class="form-control quantity-input">
                                </div>
                                <div class="size-row">
                                    <span class="size-label">L</span>
                                    <input placeholder="Qty" name="quantity-l" type="number" min="0" class="form-control quantity-input">
                                </div>
                                <div class="size-row">
                                    <span class="size-label">XL</span>
                                    <input placeholder="Qty" name="quantity-xl" type="number" min="0" class="form-control quantity-input">
                                </div>
                                <div class="size-row">
                                    <span class="size-label">XXL</span>
                                    <input placeholder="Qty" name="quantity-xxl" type="number" min="0" class="form-control quantity-input">
                                </div>
                            </div>
                            <div id="quantity-error" class="error-message"></div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3 class="form-section-title">Additional Details</h3>
                <div class="form-grid">
                    <div class="form-group">
                        <label class="form-label">Color</label>
                        <input name="color" type="text" class="form-control" placeholder="Enter color">
                        <div id="color-error" class="error-message"></div>
                    </div>
                    <div class="form-group">
                        <label class="form-label">Category</label>
                        <select class="form-select" name="category">
                            <% for(let i=category.length-1; i>=0; i--){ %>
                                <option value="<%=category[i].name%>"><%=category[i].name%></option>
                            <% } %>
                        </select>
                        <div id="category-error" class="error-message"></div>
                    </div>
                </div>
            </div>

            <div class="form-section">
                <h3 class="form-section-title">Product Images</h3>
                <div class="image-upload-section">
                    <div id="image-preview-container" class="image-preview-container"></div>
                    <div class="form-group">
                        <input type="file" name="imageFile" id="imageInput" accept="image/png, image/jpeg, image/jpg" class="form-control">
                        <div id="images-error" class="error-message"></div>
                    </div>
                    <div style="display: flex; justify-content: space-between; align-items: center; margin-top: 20px;">
                        <span style="color: var(--text-muted); font-size: 0.9rem;">Up to 8 images (min 3)</span>
                        <button type="button" class="btn btn-primary" onclick="document.getElementById('imageInput').click()">Add Image</button>
                    </div>
                </div>

                <div id="cropperContainer" class="cropper-container" style="display: none;">
                    <img id="imageToCrop" src="" alt="Image to crop">
                    <div class="cropper-buttons">
                        <button type="button" id="saveButton" class="btn btn-primary" style="display: none;">Save</button>
                        <button type="button" id="cancelCropButton" class="btn btn-secondary">Cancel</button>
                    </div>
                </div>
            </div>

            <button class="btn btn-primary submit-btn" type="submit">Publish Product</button>
        </form>
    </div>
</section>
        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
let uploadedImages = [];
const MAX_IMAGES = 8;
const MIN_IMAGES = 3;
let cropper = null;

document.addEventListener('DOMContentLoaded', function () {
    const imageInput = document.getElementById('imageInput');
    imageInput.addEventListener('change', handleImageUpload);
    
    document.getElementById('cancelCropButton').addEventListener('click', function() {
        document.getElementById('cropperContainer').style.display = 'none';
        if (cropper) {
            cropper.destroy();
            cropper = null;
        }
        document.getElementById('imageInput').value = '';
    });
    
    const form = document.querySelector('form');
    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        Swal.fire({
            title: 'Are you sure?',
            text: "You are about to publish this product!",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, publish it!'
        }).then((result) => {
            if (result.isConfirmed) {
                if (validateForm()) {
                    submitFormWithFiles();
                }
            }
        });
    });
    
    if (!document.getElementById('image-counter')) {
        const counterElement = document.createElement('div');
        counterElement.id = 'image-counter';
        counterElement.style.marginTop = '10px';
        counterElement.style.fontSize = '14px';
        document.querySelector('.image-upload-section').appendChild(counterElement);
    }
    
    updateImageCounter();
});

function updateImageCounter() {
    const counter = document.getElementById('image-counter');
    if (counter) {
        counter.textContent = `Images: ${uploadedImages.length}/${MAX_IMAGES} (minimum ${MIN_IMAGES} required)`;
        counter.style.color = uploadedImages.length < MIN_IMAGES ? '#dc3545' : '#198754';
    }
}
function handleImageUpload(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (uploadedImages.length >= MAX_IMAGES) {
        displayErrorMessage('images-error', `You can only upload a maximum of ${MAX_IMAGES} images`);
        Swal.fire({
            title: 'Upload Limit Reached',
            text: `You can only upload a maximum of ${MAX_IMAGES} images`,
            icon: 'warning',
            confirmButtonText: 'OK'
        });
        event.target.value = '';
        return;
    }
    
    if (!file.type.match('image.*')) {
        displayErrorMessage('images-error', 'Please upload only image files');
        Swal.fire({
            title: 'Invalid File Type',
            text: 'Please upload only image files (JPEG, PNG, JPG)',
            icon: 'error',
            confirmButtonText: 'OK'
        });
        event.target.value = '';
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function (e) {
        const cropperContainer = document.getElementById('cropperContainer');
        const saveButton = document.getElementById('saveButton');
        cropperContainer.style.display = 'block';
        saveButton.style.display = 'block';
        document.getElementById('imageToCrop').src = e.target.result;
        
        if (cropper) {
            cropper.destroy();
        }
        
        cropper = new Cropper(document.getElementById('imageToCrop'), {
            aspectRatio: 1,
            viewMode: 1,
            guides: true,
            background: false,
            autoCropArea: 1,
            zoomable: true,
        });
    };
    
    reader.readAsDataURL(file);
    
    
    const saveButton = document.getElementById('saveButton');
    const newSaveButton = saveButton.cloneNode(true);
    saveButton.parentNode.replaceChild(newSaveButton, saveButton);
    
    newSaveButton.addEventListener('click', function () {
        if (!cropper) return;
        
        const croppedCanvas = cropper.getCroppedCanvas();
        
        croppedCanvas.toBlob(
            (blob) => {
                const croppedFile = new File([blob], `cropped-image-${Date.now()}.png`, { type: 'image/png' });
                
                const reader2 = new FileReader();
                reader2.onloadend = function() {
                    uploadedImages.push({
                        file: croppedFile,
                        dataUrl: reader2.result
                    });
                    
                    document.getElementById('images-error').innerText = '';
                    
                    const thumbnail = document.createElement('div');
                    thumbnail.classList.add('thumbnail');
                    
                    const thumbImg = document.createElement('img');
                    thumbImg.src = reader2.result;
                    thumbImg.alt = 'thumbnail';
                    
                    const removeIcon = document.createElement('span');
                    removeIcon.classList.add('remove-icon');
                    removeIcon.innerHTML = '×';
                    
                    removeIcon.addEventListener('click', function() {
                        thumbnail.remove();
                        uploadedImages = uploadedImages.filter(img => img.dataUrl !== reader2.result);
                        updateImageCounter();
                    });
                    
                    thumbnail.appendChild(thumbImg);
                    thumbnail.appendChild(removeIcon);
                    document.getElementById('image-preview-container').appendChild(thumbnail);
                    
                    updateImageCounter();
                    
                    document.getElementById('cropperContainer').style.display = 'none';
                    cropper.destroy();
                    cropper = null;
                    document.getElementById('imageInput').value = '';
                };
                reader2.readAsDataURL(croppedFile);
            },
            'image/png',
            0.9 
        );
    });
}
function submitFormWithFiles() {
    const form = document.querySelector('form');
    const formData = new FormData();
    
  
    const formElements = form.elements;
    for (let i = 0; i < formElements.length; i++) {
        const element = formElements[i];
        if (element.name && element.type !== 'submit' && element.type !== 'file') {
            if (element.name.startsWith('quantity-')) {
                formData.append(element.name, element.value || '0');
            } else if (element.name) {
                formData.append(element.name, element.value);
            }
        }
    }
    
    
    uploadedImages.forEach((imgData, index) => {
        formData.append('imageFile', imgData.file);  
    });
    
    
    fetch(form.action, {
        method: 'POST',
        body: formData,
        credentials: 'include',
       
    })
    .then(response => {
        if (!response.ok) {
           
            return response.text().then(text => {
                console.error('Server Error Response:', text);
                throw new Error(`Server error: ${response.status} ${response.statusText}`);
            });
        }
        
        
        const contentType = response.headers.get('content-type');
        if (contentType && contentType.includes('application/json')) {
            return response.json();
        } else {
            
            return { success: true, message: 'Product added successfully' };
        }
    })
    .then(data => {
        console.log('Success:', data);
        Swal.fire({
            title: 'Success!',
            text: 'Product added successfully!',
            icon: 'success',
            confirmButtonText: 'OK'
        }).then(() => {
            window.location.href = '/admin/products';
        });
    })
    .catch(error => {
        console.error('Error:', error);
        Swal.fire({
            title: 'Error!',
            text: 'Error adding product: ' + error.message,
            icon: 'error',
            confirmButtonText: 'OK'
        });
    });
}
function validateForm() {
    clearErrorMessages();
    let isValid = true;
    
    const name = document.getElementsByName('productName')[0].value.trim();
    const description = document.getElementById('descriptionid').value.trim();
    const regularPrice = document.getElementsByName('regularPrice')[0].value.trim();
    const salePrice = document.getElementsByName('salePrice')[0].value.trim();
    const color = document.getElementsByName('color')[0].value.trim();
    
    if (!name) {
        displayErrorMessage('productName-error', 'Please enter a product name.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(name)) {
        displayErrorMessage('productName-error', 'Product name should contain only alphabetic characters.');
        isValid = false;
    }
    
    if (!description) {
        displayErrorMessage('description-error', 'Please enter a product description.');
        isValid = false;
    } else if (!/^[a-zA-Z\s]+$/.test(description)) {
        displayErrorMessage('description-error', 'Product description should contain only alphabetic characters.');
        isValid = false;
    }
    
    if (!regularPrice || !/^\d+(\.\d{1,2})?$/.test(regularPrice) || parseFloat(regularPrice) < 0) {
        displayErrorMessage('regularPrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    
    if (salePrice && (!/^\d+(\.\d{1,2})?$/.test(salePrice) || parseFloat(salePrice) < 0)) {
        displayErrorMessage('salePrice-error', 'Please enter a valid non-negative price.');
        isValid = false;
    }
    
    if (salePrice && regularPrice && parseFloat(regularPrice) <= parseFloat(salePrice)) {
        displayErrorMessage('regularPrice-error', 'Regular price must be greater than sale price.');
        isValid = false;
    }
    
    if (!color) {
        displayErrorMessage('color-error', 'Please enter a color.');
        isValid = false;
    }
    
    const sizes = ['s', 'm', 'l', 'xl', 'xxl'];
    let totalQuantity = 0;
    sizes.forEach(size => {
        const qtyInput = document.getElementsByName(`quantity-${size}`)[0];
        const value = qtyInput.value.trim();
        if (value) {
            if (!/^\d+$/.test(value) || parseInt(value) < 0) {
                displayErrorMessage('quantity-error', `Please enter a valid non-negative quantity for size ${size.toUpperCase()}.`);
                isValid = false;
            } else {
                totalQuantity += parseInt(value);
            }
        }
    });
    
    if (totalQuantity === 0) {
        displayErrorMessage('quantity-error', 'Please enter at least one size quantity.');
        isValid = false;
    }
    
    if (uploadedImages.length === 0) {
        displayErrorMessage("images-error", 'Please select at least one image.');
        isValid = false;
    } else if (uploadedImages.length < MIN_IMAGES) {
        displayErrorMessage("images-error", `Please upload at least ${MIN_IMAGES} images for the product.`);
        isValid = false;
    }
    
    return isValid;
}

function displayErrorMessage(elementId, message) {
    const errorElement = document.getElementById(elementId);
    if (errorElement) {
        errorElement.innerText = message;
        errorElement.style.display = "block";
    }
}

function clearErrorMessages() {
    const errorElements = document.getElementsByClassName('error-message');
    Array.from(errorElements).forEach(element => {
        element.innerText = '';
        element.style.display = 'none';
    });
}
</script>

        <%- include("../../views/partials/admin/footer") %>